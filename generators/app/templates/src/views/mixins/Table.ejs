import {objtourl, urltoobj} from '../../utils/url'

import {mapState, mapMutations} from 'vuex'
  
let vueObj = {
  data: () => ({
        headers: [
        { text: 'ID', value: 'id' },
        { text: 'Code', value: 'code' },
        { text: 'Name', value: 'name' },
        { text: 'Description', value: 'description' },
        { text: 'EAN', value: 'ean' },
        { text: 'Active', value: 'active' },
        { text: 'Qty requested', value: 'qtyRequested'},
        { text: 'Actions', value: 'actions', sortable: false }
      ],

        }),
    created() {
      let [,url] = window.location.href.split("#");
      if(url == null) {
        //this.getData({page: 0, search:'',rowsPerPage: this.pagination.rowsPerPage});
      }
      else {
        url = urltoobj(url);
        url.page = +url.page;
        if(url.descending == "false") url.pagination = false;
        if(url.descending == "true") url.pagination = true;
        url.rowsPerPage = +url.rowsPerPage;
        this.pagination = url;
      }
    },
/*   watch: {
      'pagination': {

      handler: 'watchPagination',
      deep: true,
    }
  },*/
  computed: {
    pagination: {
      get() {return this.$store.state.table.entity.pagination},
      set(val) {console.warn(val);this.$store.dispatch('changePaginationWatcher', {page:val, masterId: this.$route.params.masterId, filterName: this.filterName})}
    },
    pages: function() {
      return Math.ceil(this.totalItems/this.pagination.rowsPerPage) || 0;
    },
    page: {
      get() {return this.$store.state.table.entity.pagination.page},
      set(val) {console.log("H2");this.$store.dispatch('changePaginationWatcher', {page:val, masterId: this.$route.params.masterId, filterName: this.filterName})},
    },

    sortBy() {
      let sort = null;
      if(this.pagination.sortBy != null) sort = this.pagination.sortBy+','+((this.pagination.descending)?'desc':'asc');
      return sort;
    },
    areAllChecked() {
      return this.$store.getters.allChecked
    },
    loading() {
      return this.$store.state.table.entity.loading
    },
    totalItems() {
      return +this.$store.state.table.entity.totalItems
    },
    indeterminite() {
      return this.$store.state.table.entity.indeterminite
    },
    checkedDeleted() {
      return this.$store.state.table.entity.checkedDeleted
    },
    entitys() {
      return this.$store.state.table.entity.entitys
    },
  },
  methods: {
    console() {

    },

    async getData(obj) { // {page, sort, search, rowsPerPage}
      try {
        console.warn('AAAAAAAAA')
        await this.$store.dispatch('getData', obj || this.pagination)

      }
      catch(err) {console.log(err)}
    },
    deleteQuery() {
      this.searchQuery = '';
      this.$store.dispatch('search', '')
    },
    async deleteAll() {
      try {
        console.log(this.checkedDeleted)
        let headers = await deleteAll(this.checkedDeleted);
        let key = headers['x-'+'<%=baseName%>app-'+'alert'];
        let keyentity = key.split('.')[1];
        let ids = headers['x-'+'<%=baseName%>app-'+'params'];
        this.getData()
        this.$store.dispatch('snackShowAction', {text: this.$t(keyentity+'.'+key, {id: ids}), val: true, color: "success"})
      }
      catch(err) {
        this.$store.dispatch('snackShowAction', {text: "error", val: true, color: "error"})
      }
      this.$store.commit('deleteAllChecked');
    },
    changeSort(val) {
      return this.$store.commit('changeSort',val);
    },
  },
  components: {
    
  }
}

try {
  let extend = require('./TableExtend')
  vueObj.data && Object.assign(vueObj.data, extend.data)
  vueObj.mehtods && Object.assign(vueObj.methods, extend.methods)
  vueObj.computed && Object.assign(vueObj.computed, extend.computed)
} catch(err) {
  console.log(err)
}

export default (name) => {
  let store = require('../../store/entity').default(name);
  let getData = store.getData;
  let deleteItemById = store.deleteItemById;
  let getCountEntity = store.getCountEntity;
  let deleteAll = store.deleteAll;

    return vueObj; 
}