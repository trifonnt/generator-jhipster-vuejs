<% include fns.ejs %>
<% let obj = {} %>
<template>
<div class='searchbox'>
		  <v-autocomplete
		  :allow-overflow='false'
		    v-model="model"
		    :items="items"
		    placeholder="Search"
		    prepend-icon="search"
		    :search-input.sync="searchQuery"
		    cache-items
		    return-object
		    :async-loading='loading'
		    :filter="v => v"
		  >

			<template slot="item" slot-scope="{item}">
				<div class='leftcol'>{{item.text.substr(0,20)}}</div> <div class='rightcol'>{{item._id}}</div>
			</template>

		  </v-autocomplete>
		  <v-btn color='primary' flat @click='dialog=!dialog'>Advanced search</v-btn>
		  <v-dialog v-model="dialog" max-width="700px">
		  	<v-card>
	          <v-card-title>
	            Advanced search
	          </v-card-title>
	          <v-card-text>
	          	<v-form>
	          	<v-container>
	          	<v-layout row wrap>
	          		<v-flex md12>
						<v-select
							v-model = 'savedSearch'
							:items="savedSearches"
							label="Saved searches"
						></v-select>
	          		</v-flex>
	          		<% 
	                  fields[0].focus = true;
	                  for(field of fields) {
	                    let validate = {};
	                    let fName = field.fieldName;
	                    let fType = field.fieldType;
	                    let select = 'selectItems';
	                    if(field.fieldValidateRules && field.fieldValidateRules.includes('required')) validate.required = true;
	                    if("fieldValidateRulesMinlength" in field) {
	                      validate.min=field.fieldValidateRulesMinlength;
	                    }
	                    if("fieldValidateRulesMaxlength" in field) {
	                      validate.max=field.fieldValidateRulesMaxlength;
	                    }
	                    if("fieldValidateRulesPattern" in field) {
	                      validate.pattern = field.fieldValidateRulesPattern;
	                    }
	                    if(fType == "Boolean") validate.boolean = true;
	                    if(fType == "String") {
	                    	validate["alpha_dash"] = true;
	                    	select = 'selectItems2'
	                    }
	                    if(['Integer', 'BigDecimal', 'Long'].includes(fType)) validate.integer = true;
	                    if(['Float', 'Double'].includes(fType)) validate.regex = /^(?:\d+|\d{1,3}(?:,\d{3})+)(?:(\.|,)\d+)?/;
	                    validate = JSON.stringify(validate)
	              	%>
	          		<v-flex md3>
			      	    <v-select
			      	      v-model = 'advancedValues.selected<%=toLower(fName)%>'
				          :items="advanced.<%=select%>"
				          label="Label"
				        ></v-select>
			    	</v-flex>
			    	<v-flex md9>
					<% if(['Integer', 'BigDecimal', 'Long', 'Float', 'Double', 'String'].includes(fType)) {%>
	                      <v-text-field <%if(field.focus){%> autofocus <%}%> v-validate='<%-validate%>' name="<%=fName%>" label="<%=toSpaced(fName)%>" type="text" v-model="<%=fName%>"></v-text-field>
	                      <v-alert :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>  
	                    <% }%>

	                    <% if(fType == "Boolean") {%>
	                      <v-checkbox <%if(field.focus){%> autofocus <%}%>  :value='<%=fName%>' label='<%=toSpaced(fName)%>' v-validate='<%-validate%>' name='active' ></v-checkbox>
	                      <v-alert :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>
	                    <% } %>
	                    <% if(['LocalDate','ZonedDateTime','Instant'].includes(fType)) {%>
	                      <v-menu
	                          ref="menu<%=fName%>"
	                          :close-on-content-click="false"
	                          v-model="menu<%=fName%>"
	                          :nudge-right="40"
	                          :return-value.sync="<%=fName%>"
	                          lazy
	                          transition="scale-transition"
	                          offset-y
	                          full-width
	                          min-width="290px"
	                        >
	                          <v-text-field
	                            slot="activator"
	                            label="<%=toSpaced(fName)%>"
	                            prepend-icon="event"
	                            readonly
	                          ></v-text-field>
	                          <v-date-picker v-model="<%=fName%>" @input="$refs.menu<%=fName%>.save(<%=fName%>)"></v-date-picker>

	                        </v-menu>
	                        <v-alert :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>
	                    <% } %>
	                    <% if(fType == "Enumeration") {%>
	                      <v-select <%if(field.focus){%> autofocus <%}%>  :items='<%=addS(fName)%>' solo v-validate='<%-validate%>' name="<%=fName%>" label="<%=toSpaced(fName)%>" v-model="<%=fName%>"></v-select>
	                      <v-alert :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>
	                    <% } %>
	              	</v-flex>
	              	<% } %>
	              	<% for(relationship of relationships) { 
                    let validate = {};
                    let fName = relationship.relationshipName;
                    let fType = relationship.relationshipType;
	                let select = 'selectItems';
                    if(relationship.relationshipValidateRules && relationship.relationshipValidateRules.includes('required')) validate.required = true;
                    if("relationshipValidateRulesMinlength" in relationship) {
                      validate.min=relationship.relationshipValidateRulesMinlength;
                    }
                    if("relationshipValidateRulesMaxlength" in relationship) {
                      validate.max=relationship.relationshipValidateRulesMaxlength;
                    }
                    if("relationshipValidateRulesPattern" in relationship) {
                      validate.pattern = relationship.fieldValidateRulesPattern;
                    }
                    if(fType == "Boolean") validate.boolean = true;
                    if(fType == "String") validate["alpha_dash"] = true;
                    if(['Integer', 'BigDecimal', 'Long'].includes(fType)) validate.integer = true;
                    if(['Float', 'Double'].includes(fType)) validate.regex = /^(?:\d+|\d{1,3}(?:,\d{3})+)(?:(\.|,)\d+)?/;
                    validate = JSON.stringify(validate)
                  %>
                  	<v-flex md3>
                  		<v-select
			      	      v-model = 'advancedValues.selected<%=toLower(fName)%>'
				          :items="advanced.<%=select%>"
				          label="Label"
				        ></v-select>
                  	</v-flex>
                  	<v-flex md9>
                      <v-select <%if(field.focus){%> autofocus <%}%>  :items='<%=addS(toLower(fName))%>' solo v-validate='<%-validate%>' name="<%=toLower(fName)%>" label="<%=toSpaced(fName)%>" v-model="<%=toLower(fName)%>"></v-select>
                      <v-alert :value="errors.has('<%=toLower(fName)%>')" type="error">{{ errors.first('<%=toLower(fName)%>') }}</v-alert>
                  	</v-flex>
                  <% } %>

              </v-layout>
              </v-container>
          </v-form>
	          </v-card-text>
	          <v-card-actions>
	          	<v-btn color='success' flat icon @click='searchAdvanced'><v-icon>search</v-icon></v-btn>
	            <v-btn color="primary" flat @click='saveSearch'>Save search</v-btn>
	            <v-btn color="error" flat @click="dialog=false">Close</v-btn>
	          </v-card-actions>
	        </v-card>
		  </v-dialog>

</div>

<!--       <v-container>
        <v-layout row wra>
          <v-flex md4 justif>
          	<v-card>
				<v-card-text>
					{{model}}
				  <v-autocomplete
				  :allow-overflow='false'
				    v-model="model"
				    :items="items"
				    placeholder="Search"
				    prepend-icon="search"
				    :search-input.sync="searchQuery"
				    cache-items
				    return-object
				    :async-loading='loading'
				    :filter="v => v"
				  >

					<template slot="item" slot-scope="{item}">
						<div class='leftcol'>{{item.text.substr(0,20)}}</div> <div class='rightcol'>{{item._id}}</div>
					</template>

				  </v-autocomplete>
				</v-card-text>
			</v-card>
		</v-flex>
	</v-layout>
</v-container> -->
</template>

<script>
	import axios from 'axios'
	let store = require('../../../store/products').default('product');
	export default {
		inject: ['$validator'],
		created() {
			//this.getData();
		},
		data: () =>  ({
	      <% fields.forEach(field=>{%>
	        <%
	          let fType = field.fieldType;
	          let val;
	          if(fType == 'String') val = '""';
	          if(['Integer','BigDecimal','Long','Float','Double', 'LocalDate', 'Instant', 'ZonedDateTime', 'Boolean'].includes(fType)) {
	            val = '""';
	          }
	          if(fType == 'String' && field.fieldValues !=undefined) val = '';
	          obj[field.fieldName] = val;
	        %>
	        <% 
	        	if(['LocalDate', 'Instant', 'ZonedDateTime'].includes(fType)) {
	        %>
	        	menu<%=field.fieldName%>: '',
	        <% } %>
	        <%=field.fieldName%>: <%-val%>,
	      <%})%>
		  <% if(relationships.length) { %>
			<% for(relationship of relationships) { %>
			  obj[relationship.relationshipName] = '';
			<% } %>
		  <% } %>
			advanced: [
				{selectItems: [{text: 'greater than', value: 1}, {text:'less than', value: 2}]},
				{selectItems2: [{text: 'equal', value: 1}, {text:'right*', value: 2},{text:'*left', value: 3}],},
			],
			advancedValues: {},
			advancedValues2: <%-JSON.stringify(obj)%>,
			savedSearch: null,
			savedSearches: [],
			dialog: false,
			model: null,
			items: [],
			loading: false,
			itemsOne: [],
			headers: [
				{text: "id", value:'id1'},
				{text: "text", value:'id2'},
				{text: "text2", value:'id3'},
			]
		}),

		computed: {
			searchQuery: {
				get() {return this.$store.state.table.product.search},
				set(val) {this.$store.commit('setSearch', val)}
			}
		},
		methods: {
		  async getData() {
		  	try {
		  		let response = await getSavedSearches();
		  		this.advancedValues = response.advancedValues;
		  		//this.advancedValues2 = response.advancedValues2;
		  	}
		  	catch(err) {
		  		console.log(err)
		  	}
		  },
	      search() {
	        if(!this.searchQuery) return false;
	        this.$store.dispatch('search', this.searchQuery)
	      },
	      searchAdvanced() {
	      	this.$store.dispatch('getData', {options: this.advancedValues, values: this.advancedValues2})
	      },
	      async saveSearch() {
	      	try {
	      		await store.saveSearch(this.advancedValues, this.advancedValues2)
	      	}
	      	catch(err) {
	      		console.log(err)
	      	}
	      },
	      deleteQuery() {
	        this.$store.dispatch('search', '')
	      },
		},

		watch: {
			async searchQuery(val) {
		    	//this.search();
			    try {
			    	let response = await axios.get('https://cat-fact.herokuapp.com/facts');
			    	this.items = response.data.all;
			    	this.items.splice(0,0,{_id:'aa', text:'yy', disabled: true})
			    	console.log(this.items)
			    }
			    catch(err) {
			    	console.log(err)
			    }
			}
		}
	}
</script>

<style>

	.leftcol {
		width:200px;
		float: left;
	}
	.rightcol {
		width: 200px;
		float: right;
	}
	.v-select-list > .v-list > div:nth-child(odd) {
		background: #f5f5f5;
	}
	.v-select-list > .v-list > div:first-child {
		border-bottom: 1px solid lightgray;
	}

	.searchbox {
		display: inline-block;
		width: 40%;
		margin-left: 30px;
	}

	.searchbox .v-text-field__details {
		display: none;
	}

	.searchbox .v-input__slot {
		margin: 0;
	}

	@media only screen and (max-width: 446px) {
		.searchbox {
			display: block;
			width: 90%;
		}
	}

</style>