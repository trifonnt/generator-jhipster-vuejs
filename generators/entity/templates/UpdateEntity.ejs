<% include fns.ejs %>

<template>
  <v-app id="inspire">
    <v-content>
      <v-container fluid fill-height>
        <v-layout justify-center>
          <v-flex xs12 sm8 md4>
            <v-card class="elevation-12">
              <v-toolbar dark color="primary">

                <v-toolbar-title>{{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.home.createOrEditLabel')}}</v-toolbar-title>
                <v-spacer></v-spacer>

              </v-toolbar>
                            <v-card-text>
                <v-form @submit.prevent='edit' @keyup.native.enter='enterForm'>
                  <% 
                  fields[0].focus = true;
                  fields.forEach(field=>{
                    let validate = {};
                    let req = false;
                    let fName = field.fieldName;
                    let fType = field.fieldType;
                    if(field.fieldValidateRules && field.fieldValidateRules.includes('required')) {
                      validate.required = true;
                      req = true;
                    }
                    if("fieldValidateRulesMinlength" in field) {
                      validate.min=field.fieldValidateRulesMinlength;
                    }
                    if("fieldValidateRulesMaxlength" in field) {
                      validate.max=field.fieldValidateRulesMaxlength;
                    }
                    if("fieldValidateRulesPattern" in field) {
                      validate.pattern = field.fieldValidateRulesPattern;
                    }
                    //if(fType == "Boolean") validate.boolean = true;
                    if(fType == "String") validate["alpha_dash"] = true;
                    if(['Integer', 'BigDecimal', 'Long'].includes(fType)) validate.integer = true;
                    if(['Float', 'Double'].includes(fType)) validate.regex = /^(?:\d+|\d{1,3}(?:,\d{3})+)(?:(\.|,)\d+)?/;
                    validate = JSON.stringify(validate)
                  %>
                    <% if(['Integer', 'BigDecimal', 'Long', 'Float', 'Double'].includes(fType) && field.fieldValues == undefined) {%>
                      <v-text-field v-show="$route.params.hideName != '<%=fName%>'" :readonly='isReadOnly("<%=field.readonlyForRoles%>")' v-hasRole="'<%=field.visibleForRole%>'" <%if(req) {%> prepend-inner-icon='*' <%}%> <%if(field.focus){%> autofocus <%}%>  v-validate='<%-validate%>' name="<%=fName%>" :label="$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')" type="text" v-model="<%=fName%>"></v-text-field>
                      <v-alert v-hasRole="'<%=field.visibleForRole%>'" :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>  
                    <% }%>

                    <% if(fType=="String" && field.fieldValues == undefined) {%>
                      <v-text-field v-show="$route.params.hideName != '<%=fName%>'" :readonly='isReadOnly("<%=field.readonlyForRoles%>")' v-hasRole="'<%=field.visibleForRole%>'" <%if(req) {%> prepend-inner-icon='*' <%}%> <%if(field.focus){%> autofocus <%}%> name="<%=fName%>" :label="$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')" type="text" v-model="<%=fName%>"></v-text-field>
                      <v-alert v-hasRole="'<%=field.visibleForRole%>'" :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>  
                    <% }%>
                    <% if(fType=="byte[]" && (field.fieldTypeBlobContent == 'any' || field.fieldTypeBlobContent == 'image')) { %>
<!--                         <input-file v-show="$route.params.hideName != '<%=fName%>'" @upload='upload' name='<%=field.fieldName%>' :files='[{field:"<%=field.fieldName%>", name:<%=field.fieldName%>FileName}]' @removeUpload='removeUpload'></input-file>
                         -->
                        <span class='grey--text'>
                          {{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')}}
                        </span>
                       <v-dialog
                          v-model="dialogFile<%fName%>"
                          fullscreen
                        >
                          <v-btn
                            slot="activator"
                            color="primary"
                            dark
                          >
                            Upload a file
                          </v-btn>

                          <v-card>
                            <v-card-title
                              class="headline grey lighten-2"
                              primary-title
                            >
                              <h5>Upload file for {{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')}}</h5>
                              <v-spacer></v-spacer>
                              <v-btn
                                color="gray"
                                flat
                                @click="dialogFile<%=fName%> = false"
                              >
                                Close
                              </v-btn>
                            </v-card-title>

                            <v-card-text>
                              {{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')}}
                              <input-file maxFilesize='<%=field.maxFilesize%>' maxFiles='<%=field.maxFiles%>' contentType='<%=field.contentType%>' @uploadFile='uploadFile' name='<%=field.fieldName%>' :uploadedFiles='[{name:<%=field.fieldName%>FileName, size: <%=field.fieldName%>FileSize, type:<%=field.fieldName%>ContentType, file: <%=field.fieldName%>File}]' :loading='loading<%=fName%>' @loading='loading<%=fName%> = true'></input-file>

                            </v-card-text>

                            <v-divider></v-divider>

                          </v-card>
                        </v-dialog>
<!--                         <v-chip v-show='<%=field.fieldName%> && <%=field.fieldName%>.length>0'>
                          <a :href='"data:"+<%=field.fieldName%>ContentType+";base64,"+<%=field.fieldName%>' :download='<%=field.fieldName%>FileName'>{{<%=field.fieldName%>FileName}}</a> 
                          <v-btn v-show='<%=field.fieldName%>' v-hasRole="'<%=field.visibleForRole%>'" icon @click='<%=fName%>="";<%=field.fieldName%>ContentType="";<%=field.fieldName%>FileName=""'><v-icon>delete</v-icon></v-btn>
                        </v-chip> -->
                    <% } %>
                    <% if(fType == "Boolean") {%>
                      <v-checkbox v-show="$route.params.hideName != '<%=fName%>'" :readonly='isReadOnly("<%=field.readonlyForRoles%>")' v-hasRole="'<%=field.visibleForRole%>'" <%if(field.focus){%> autofocus <%}%>  v-model='<%=fName%>' :label="$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')" name='<%=fName%>'></v-checkbox>
                      <v-alert v-hasRole="'<%=field.visibleForRole%>'" :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>
                    <% } %>
                    <% if(['LocalDate','ZonedDateTime'].includes(fType)) {%>
                      <v-menu v-show="$route.params.hideName != '<%=fName%>'" :disabled='isReadOnly("<%=field.readonlyForRoles%>")' v-hasRole="'<%=field.visibleForRole%>'"
                          ref="menu<%=fName%>"
                          :close-on-content-click="false"
                          v-model="menu<%=fName%>"
                          :nudge-right="40"
                          :return-value.sync="<%=fName%>"
                          lazy
                          transition="scale-transition"
                          offset-y
                          full-width
                          min-width="290px"
                        >
                          <v-text-field
                            slot="activator"
                            v-model="<%=fName%>"
                            label="$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')"
                            prepend-icon="event"
                            readonly
                          ></v-text-field>
                          <v-date-picker v-model="<%=fName%>" @input="$refs.menu<%=fName%>.save(<%=fName%>)"></v-date-picker>

                        </v-menu>
                        <v-alert v-hasRole="'<%=field.visibleForRole%>'" :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>
                    <% } %>
                    <% if(fType == 'Instant') { %>
                      <datetime v-show="$route.params.hideName != '<%=fName%>'" v-hasRole="'<%=field.visibleForRole%>'" type='datetime' v-model="<%=fName%>" input-id="<%=fName%>" input-class='borderField'>
                          <label for="<%=fName%>" slot="before">{{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')}}</label>
                      </datetime>   
                    <% } %>
                    <% if(fType == "String" && field.fieldValues != undefined) {%>
                      <v-select :readonly='isReadOnly("<%=field.readonlyForRoles%>")' v-hasRole="'<%=field.visibleForRole%>'" <%if(field.focus){%> autofocus <%}%>  :items='<%=addS(fName)%>' solo v-validate='<%-validate%>' name="<%=fName%>" :label="$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')" v-model="<%=fName%>"></v-select>
                      <v-alert v-hasRole="'<%=field.visibleForRole%>'" :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>
                    <% } %>
                  <% if(fType == 'Html' || fType == 'byte[]' && field.fieldTypeBlobContent == 'text') {%>
                      {{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')}}
                      <br/>
                      <quill-editor v-show="$route.params.hideName != '<%=fName%>'" v-hasRole="'<%=field.visibleForRole%>'" ref="quillEditor<%=fName%>"
                        v-model="<%=fName%>"
                        :options="editorOptions">
                      </quill-editor>
                  <% } %>
                  <%})%>
                  <% for(relationship of relationships) { 
                    let multiple = false;
                    if(!(relationship.relationshipType == 'many-to-many' && relationship.ownerSide==false)) {
                    if(relationship.relationshipType == 'many-to-many' || relationship.relationshipType == 'one-to-many') multiple=true;

                    let validate = {};
                    let fName = relationship.relationshipName;
                    let fType = relationship.relationshipType;
                    let req = false;
                    if(relationship.relationshipValidateRules && relationship.relationshipValidateRules.includes('required')) {
                      validate.required = true;
                      req = true;
                    }
                    if("relationshipValidateRulesMinlength" in relationship) {
                      validate.min=relationship.relationshipValidateRulesMinlength;
                    }
                    if("relationshipValidateRulesMaxlength" in relationship) {
                      validate.max=relationship.relationshipValidateRulesMaxlength;
                    }
                    if("relationshipValidateRulesPattern" in relationship) {
                      validate.pattern = relationship.fieldValidateRulesPattern;
                    }
                    if(fType == "Boolean") validate.boolean = true;
                    if(fType == "String") validate["alpha_dash"] = true;
                    if(['Integer', 'BigDecimal', 'Long'].includes(fType)) validate.integer = true;
                    if(['Float', 'Double'].includes(fType)) validate.regex = /^(?:\d+|\d{1,3}(?:,\d{3})+)(?:(\.|,)\d+)?/;
                    validate = JSON.stringify(validate)
                    let model = fName;
                    if(relationship.relationshipType == 'many-to-many' || relationship.relationshipType == 'one-to-many') {
                      model = fName+'Values';
                    }
                  %>
 <!--                      <v-select <%if(relationship.focus){%> autofocus <%}%> <%if(multiple){%> multiple return-object <%}%> :items='<%=addS(fName)%>' solo v-validate='<%-validate%>' name="<%=fName%>" :label="$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')" v-model="<%=fName%>"
                        item-text='<%=relationship.otherEntityField%>' item-value='id'
                        ></v-select>


 -->
                         <%if(relationship.otherEntityField2 && relationship.otherEntityName != 'file') {%>
                            <br>
                            <div v-show="$route.params.hideName != '<%=fName%>'">{{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%= (relationship.relationshipType == 'many-to-many' || relationship.relationshipType == 'one-to-many') ? pluralize(fName) : fName %>')}}</div>
                          <multiselect v-show="$route.params.hideName != '<%=fName%>'"
                            v-validate = '<%-validate%>'
                            data-vv-name = 'id'
                            data-vv-value-path = 'id'
                            :internal-search="false"
                            :searchable = "true"
                            @search-change = 'changeSearch'
                            :limit = '10'
                            :show-labels="false"
                            @open='newDropdown'
                            :multiple = '<%=multiple%>'
                            :close-on-select="<%=!multiple%>" 
                            id='<%=pluralize(fName)%>'
                            label='name'
                            v-model = '<%=model%>'
                            :options = '<%=pluralize(fName)%>'
                            :placeholder="$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%= (relationship.relationshipType == 'many-to-many' || relationship.relationshipType == 'one-to-many') ? pluralize(fName) : fName %>')"
                            track-by='id'
                          >
                          <template slot="option" slot-scope="props">
                            <div class='leftcol'>{{props.option.<%=relationship.otherEntityField%>}}</div>
                            <div class='rightcol'>{{props.option.<%=relationship.otherEntityField2%>}}</div>
                          </template>
                          <template slot='afterList'>
                            <v-pagination :total-visible='pageLength' @input='changePage' v-show='pageLength'
                              v-model="currentPage"
                              :length="pageLength"
                            ></v-pagination>
                          </template>
                          </multiselect>

                      <% } else if(relationship.otherEntityName != 'file') { %>
                          <br>
                          <div v-show="$route.params.hideName != '<%=fName%>'">{{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%= (relationship.relationshipType == 'many-to-many' || relationship.relationshipType == 'one-to-many') ? pluralize(fName) : fName %>')}}</div>
                          <multiselect v-show="$route.params.hideName != '<%=fName%>'"
                            v-validate = '<%-validate%>'
                            data-vv-name = 'id'
                            data-vv-value-path = 'id'
                            :internal-search="false"
                            :searchable = "true"
                            @search-change = 'changeSearch'
                            :limit = '10'
                            @open='newDropdown'
                            :multiple = '<%=multiple%>'
                            :close-on-select="<%=!multiple%>" 
                            id='<%=pluralize(fName)%>'
                            label='name'
                            v-model = '<%=model%>'
                            :options = '<%=pluralize(fName)%>'
                            :placeholder="$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%= (relationship.relationshipType == 'many-to-many' || relationship.relationshipType == 'one-to-many') ? pluralize(fName) : fName %>')"
                            track-by='id'
                          >
                          <template slot='afterList'>
                            <v-pagination :total-visible='pageLength' @input='changePage' v-show='pageLength'
                              v-model="currentPage"
                              :length="pageLength"
                            ></v-pagination>
                          </template>
                          </multiselect>
                      <% } else { %>
                        <span class='grey--text'>
                          {{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')}}
                        </span>
                       <v-dialog
                          v-model="dialogFile<%=fName%>"
                          fullscreen
                        >
                          <v-btn
                            slot="activator"
                            color="primary"
                            dark
                          >
                            Upload a file
                          </v-btn>

                          <v-card>
                            <v-card-title
                              class="headline grey lighten-2"
                              primary-title
                            >
                              <h5>Upload file for {{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')}}</h5>
                              <v-spacer></v-spacer>
                              <v-btn
                                color="gray"
                                flat
                                @click="dialogFile<%=fName%> = false"
                              >
                                Close
                              </v-btn>
                            </v-card-title>

                            <v-card-text>
                              <input-file maxFilesize='<%=relationship.relationshipValidateRulesMaxFilesize%>' maxFiles='<%=relationship.relationshipValidateRulesMaxFiles%>' contentType='<%=relationship.relationshipValidateRulesContentType%>' @uploadFile='uploadFile' @loading='loading<%=fName%> = true' name='<%=fName%>' :loading='loading<%=fName%>'
                               :uploadedFiles='[{name:<%=fName%>FileName, size: <%=fName%>FileSize, type: <%=fName%>ContentType, file: <%=fName%>File}]'></input-file>
                              
                            </v-card-text>

                            <v-divider></v-divider>

                          </v-card>
                        </v-dialog>
                      <% } %>

                      <v-alert v-hasRole="'<%=relationship.visibleForRole%>'" :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>
                  <% } } %>
        
             <!--    <v-alert type='success' :value="registered==true">You successfully created a vendor</v-alert>
                <v-alert type='error' :value="registered==false">Please try again, server error</v-alert>  -->               
                </v-form>
              </v-card-text>
              <v-card-actions>
                <v-spacer></v-spacer>
                <v-btn :disabled="errors.any()" color="primary" @click='edit'>{{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.home.createOrEditLabel')}}</v-btn>
                <v-btn @click='cancel'>{{$t('app.cancel')}}</v-btn>
              </v-card-actions>
            </v-card>
          </v-flex>
        </v-layout>
      </v-container>
    </v-content>
  </v-app>
</template>

<script>
  import {getProfile} from '../../../store/identity'
  import InputFile from '../../common/InputFile.vue'

  let store = require('../../../store/<%=toLower(name)%>').default;
  <% for(relationship of relationships) {%>
    let <%=addS(firstToUpper(relationship.relationshipName))%>store = require('../../../store/<%=toLower(relationship.otherEntityName)%>').default;
  <% } %> 
    let edit = store.edit;
    let getFiles = store.getFiles;
    let deleteImage = store.deleteImage;
    let relationStores = {};
    <% for(relationship of relationships) {%>
      relationStores.<%=pluralize(relationship.relationshipName)%> = <%=addS(firstToUpper(relationship.relationshipName))%>store;
    <% } %> 
    let getEntityById = store.getEntityById;    
    export default {
    inject: ['$validator'],
    components: {
      InputFile,
    },
    data: () => ({
      activeDropdown: '',
      currentPage: 1,
      pageLength: 0,
      editorOptions: {
        modules: {
          toolbar: [
            ['bold', 'italic', 'underline', 'strike'],
            ['blockquote', 'code-block'],
            [{ 'header': 1 }, { 'header': 2 }],
            [{ 'list': 'ordered' }, { 'list': 'bullet' }],
            [{ 'script': 'sub' }, { 'script': 'super' }],
            [{ 'indent': '-1' }, { 'indent': '+1' }],
            [{ 'direction': 'rtl' }],
            [{ 'size': ['small', false, 'large', 'huge'] }],
            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
            [{ 'font': [] }],
            [{ 'color': [] }, { 'background': [] }],
            [{ 'align': [] }],
            ['clean'],
          ],
        }
      },
      registered: null,
      <% fields.forEach(field=>{%>
        <%
          let fType = field.fieldType;
          let val;
          if(fType == 'String') val = '""';
          if(fType == 'Boolean') val = "''";
          if(['Integer','BigDecimal','Long','Float','Double', 'LocalDate', 'Instant', 'ZonedDateTime','String', 'byte[]'].includes(fType)) {
            val = '""';
        %>
          <% 
            if(['LocalDate', 'Instant', 'ZonedDateTime'].includes(fType)) {
          %>
            menu<%=field.fieldName%>: '',
          <% } %>
          <% if(fType == 'byte[]') { %>
            <% if(fType=="byte[]" && (field.fieldTypeBlobContent == 'any' || field.fieldTypeBlobContent == 'image')) { %>
              dialogFile<%=field.fieldName%>: false,
              loading<%=field.fieldName%>: false,
            <% } %>
            <%=field.fieldName%>ContentType: "",
            <%=field.fieldName%>FileName: "",
          <% } %>
        <%=field.fieldName%>: <%-val%>,
        <%
          }
          if(fType == 'String' && field.fieldValues != undefined) {
            val = field.fieldValues.split(',')
        %>
        <%=field.fieldName%> : [],
        <%=addS(field.fieldName)%>: [
          <%for(val of field.fieldValues.split(',')) {%>
            "<%=val%>",
          <% } %>
        ],
        <%
          }
        %>
      <%})%>
      <% if(relationships.length) { %>
        <% for(relationship of relationships) { %>
          <% if(relationship.otherEntityName == 'file') { %>
              <%=relationship.relationshipName%>Id: null,
              <%=relationship.relationshipName%>FileName: null,
              <%=relationship.relationshipName%>FileSize: null,
              <%=relationship.relationshipName%>File: null,
              <%=relationship.relationshipName%>ContentType: null,
              dialogFile<%=relationship.relationshipName%>: false,
              loading<%=relationship.relationshipName%>: false,
          <% } %>
          <%=pluralize(relationship.relationshipName)%>search: '*',
          <%=pluralize(relationship.relationshipName)%>: [],
          <%
            if(relationship.relationshipType=='many-to-many' || relationship.relationshipType=='one-to-many') {
          %>
          <%=relationship.relationshipName%>:[],
          <%=relationship.relationshipName%>Values:[],
          <% } else {%>
          <%=relationship.relationshipName%>: '',
          <% } %>
        <% } %>
      <% } %>

    }),
    created() {
      this.getData();
    },
    watch: {
      <% for(relationship of relationships) { %>
        <%=pluralize(relationship.relationshipName)%>search(val) {
          try {
          this.getDropdownData();
          }
          catch(err) {
            console.error(err)
          }
        },
      <% } %>
    },
    methods: {
      async getDropdownData() {
        if(!this.activeDropdown) return;
        let relation,count;
        let prop = this.activeDropdown + 'search';
        relation = await relationStores[this.activeDropdown].getData(this.currentPage-1, "id,asc", this[prop])
        count = relation.headers['x-total-count']
        relation = relation.data
        this[this.activeDropdown] = relation;
        this.pageLength = Math.ceil(count/10);
      },
      changePage(val) {
        this.currentPage = val;
        this.getDropdownData();
      },
      changeSearch(val) {
        let prop = this.activeDropdown + 'search';
        this[prop] = val
      },
      newDropdown(event) {
        this.activeDropdown = event;
        this.getDropdownData();
      },
      enterForm() {
        if(!this.errors.any()) this.edit()
      },
      isReadOnly(roles) {
        if(roles == "false" || !roles) return false;
        if(!roles.length) return roles;
        if(roles.includes(',') 
          && roles.split(',').every(r=>!getProfile().roles.includes(r)).length==0) return false;
        else if(!roles.includes(',') && getProfile().jwt && getProfile().roles[0]!=roles) return false;
        return true
      },
      async uploadFile(obj) {
        try {
          let res = await store.uploadFile(obj.file[0], obj.name)
          let prop = 'loading'+obj.name;
          this[prop] = false;
          prop = 'dialogFile'+ obj.name.charAt(0).toLowerCase() + obj.name.slice(1);
          this[prop] = false
          this.$store.dispatch('snackShowAction', {text: this.$t('file.<%=baseNameApp%>.file.created', {id: res.id}), val: true, color: "success"})
          this[obj.name+'Id'] = res.id;
        }
        catch(err) {
          console.error(err)
        }
      },
			async edit() {
        let res;
        let masterId = this.$route.params.hideName+'Id';
        let masterIdVal = this.$route.params.masterId;
        let obj =  {           
            id: this.$route.params.id,
            <% for(field of fields) { %>
              <%=field.fieldName%>:this.<%=field.fieldName%>,
              <% if(field.fieldType == 'byte[]') { %>
                <%=field.fieldName%>ContentType: this.<%=field.fieldName%>ContentType,
                <%=field.fieldName%>FileName: this.<%=field.fieldName%>FileName,
              <% } %>
            <% } %>
            <% for(relationship of relationships) { %>
              <% if(relationship.otherEntityName == 'file') { %>
                <%=relationship.relationshipName%>Id: this.<%=relationship.relationshipName%>Id,
              <%
                } else if(relationship.relationshipType=='many-to-many' || relationship.relationshipType=='one-to-many') {
              %>
              <%=pluralize(relationship.relationshipName)%>: this.<%=relationship.relationshipName%>Values.map(o=>({id:o.id})),
              <% } else { %>
              <%=relationship.relationshipName%>Id:(this.<%=relationship.relationshipName%> && this.<%=relationship.relationshipName%>.id) || '', 
            <% } } %> }
        if(masterIdVal) obj[masterId] = masterIdVal;
        try {
          res = await edit(obj);
          this.$store.dispatch('snackShowAction', {text: this.$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.updated', {id: this.$route.params.id}), val: true, color: "success"})          
          this.registered = true
          this.$router.go(-1);
				}
				catch(err) {
          let msg = err.response.data.title
          this.$store.dispatch('snackShowAction', {text: msg, val: true, color: "error"})          
					this.registered = false
				}
			},
      cancel() {
        this.$router.go(-1);
      },
      async getData() {
        try {
          let [
            <% for(relationship of relationships) {
              if(!(relationship.relationshipType == 'many-to-many' && relationship.ownerSide==false)) {
            %>
              <%=relationship.relationshipName%>,
            <% } } %> entity] = await Promise.all([
                <% for(relationship of relationships) {
                  if(!(relationship.relationshipType == 'many-to-many' && relationship.ownerSide==false)) {
                %>
                  <%=addS(firstToUpper(relationship.relationshipName))%>store.getData(),
                <% } }%> 
                getEntityById(this.$route.params.id)
              ]);

          <% for(field of fields) { %>
            this.<%=field.fieldName%> = entity.<%=field.fieldName%>;
            <% if(field.fieldType == 'byte[]' && field.fieldTypeBlobContent == 'image') { %>
            // this.<%=field.fieldName%>FileIds = entity.<%=field.fieldName%>Id;
            let entityImages = await getFiles(entity.<%=field.fieldName%>Id);
            if(!entityImages.length) entityImages = [entityImages]
            for(let image of entityImages) {
              this.<%=field.fieldName%>FileName = image["<%=field.fieldName%>FileName"];
              this.<%=field.fieldName%>ContentType = image["<%=field.fieldName%>ContentType"];
              this.<%=field.fieldName%>FileSize = image["<%=field.fieldName%>FileSize"];
              this.<%=field.fieldName%>File = image["<%=field.fieldName%>File"];
            }
            <% } %>
          <% } %>
          <% for(relationship of relationships) { %>
            <% if(relationship.otherEntityName == 'file') { %>
            // this.<%=relationship.relationshipName%>FileIds = entity.<%=relationship.relationshipName%>Id;
            let entityImages = await getFiles(entity.<%=relationship.relationshipName%>Id);
            if(!entityImages.length) entityImages = [entityImages]
            for(let image of entityImages) {
              this.<%=relationship.relationshipName%>FileName = image["fileFileName"];
              this.<%=relationship.relationshipName%>ContentType = image["fileContentType"];
              this.<%=relationship.relationshipName%>File = image["fileFile"];
            }
            <%
            } else if(!(relationship.relationshipType == 'many-to-many' && relationship.ownerSide==false)) {
          %>
              this.<%=pluralize(relationship.relationshipName)%> = <%=relationship.relationshipName%>.data
              <%
                if(relationship.relationshipType == 'many-to-many' || relationship.relationshipType == 'one-to-many') {
              %>
                this.<%=relationship.relationshipName%>Values = entity.<%=pluralize(relationship.relationshipName)%>
              <% } else  { %>
              this.<%=relationship.relationshipName%> = this.<%=pluralize(relationship.relationshipName)%>.filter(o=>o.id == entity.<%=relationship.relationshipName%>Id)
              if(this.<%=relationship.relationshipName%>.length == 1) this.<%=relationship.relationshipName%> = this.<%=relationship.relationshipName%>[0]
              <% } %>
          <% } } %>
        }
        catch(err) {console.log(err)}
      },
		}
	}
</script>
<style scoped>
	.leftcol {
    width:200px;
    float: left;
  }
  .rightcol {
    width: 200px;
    float: right;
  }
</style>