<% include fns.ejs %>

import axios from 'axios'

export function getEntityData(page=0, sort='id,asc', search='', size=10,invoiceId='') {
	if(!search) return axios.get('<%=pluralize(toDashed(name))%>', {params: {paged: true, page, size, sort, 'invoiceId.equals': invoiceId}});
	return axios.get('_search/<%=pluralize(toDashed(name))%>', {params: {paged: true, page, size, sort, query: search, 'invoiceId.equals': invoiceId}});
}
export function getEntityCount(search='',invoiceId='') {
	if(!search) return axios.get('<%=pluralize(toDashed(name))%>/count').then(data=>data.data);
	return axios.get('_search/<%=pluralize(toDashed(name))%>', {params: {query: search, 'invoiceId.equals': invoiceId}}).then(data=>data.headers);	
}
export function createEntity(obj) {
  <% for(field of fields) {
    if(['Float','Double'].includes(field.fieldType)) {
   %>
   <%=field.fieldName%> = <%=field.fieldName%>.replace('/,/g','.');
   <% }} %>
	return axios.post('<%=pluralize(toDashed(name))%>', obj).then(data=>data.data);
}
export function editEntity(obj) {
   <% for(field of fields) {
    if(['Float','Double'].includes(field.fieldType)) {
   %>
   <%=field.fieldName%> = <%=field.fieldName%>.replace('/,/g','.');
   <% }} %>
	return axios.put('<%=pluralize(toDashed(name))%>', obj).then(data=>data.data);
}
export function getEntityId(id) {
	return axios.get('<%=pluralize(toDashed(name))%>/'+id).then(data=>data.data)
}
export function getEntityTemplate() {
	return axios.get('<%=pluralize(toDashed(name))%>/template').then(data=>data.data)
}
export function deleteId(id) {
	return axios.delete('<%=pluralize(toDashed(name))%>/'+id).then(data=>data.data)
}
export function deleteAllItems(items) {
	return axios.delete('<%=pluralize(toDashed(name))%>', {data: {ids: items}})
	/* let promises = items.map(id=>axios.delete('<%=pluralize(toDashed(name))%>/'+id).then(data=>data.data));
	return Promise.all(promises) */
}
export function getLabels() {
	return axios.get('<%=pluralize(toDashed(name))%>/getLabels');
}
export function saveLabels(data) {
	return axios.post('<%=pluralize(toDashed(name))%>/labels', data);
}
export function saveItemOrder(left, right) {
	return axios.post('<%=pluralize(toDashed(name))%>/saveItemOrder', {left, right})
}
export function getItemOrder() {
	return axios.get('itemorder');
}
export function saveSearch(searchBy, values) {
	return axios.post('savesearch', {searchBy, values}).then(data=>data.data);
}

<% for(relationship of relationships) { 
	let thename = addS(firstToUpper(relationship.relationshipName))
	if(!(relationship.relationshipType == 'many-to-many' && relationship.ownerSide==false)) {
%>
	export function get<%=thename%>Data() {
		return axios.get('<%=pluralize(toDashed(relationship.otherEntityName))%>', {params: {}}).then(data=>data.data);
	}

<% } } %>