<% include fns.ejs %>

import axios from '../modules/axios'

export function getEntityData(page=0, sort='id,asc', search='', size=10, masterId='', filterName = '') {
	if(!search) return axios.get('<%=pluralize(toDashed(name))%>', {params: {paged: true, page, size, sort, [filterName]: masterId}});
	return axios.get('_search/<%=pluralize(toDashed(name))%>', {params: {paged: true, page, size, query: search, [filterName]: masterId}});
}
export function getEntityCount(search='*', masterId='', filterName = '') {
	return axios.get('_search/<%=pluralize(toDashed(name))%>', {params: {query: search, [filterName]: masterId}}).then(data=>data.headers['x-total-count']);	
}
export function createEntity(obj) {
  <% for(field of fields) {
    if(['Float','Double'].includes(field.fieldType)) {
   %>
   <%=field.fieldName%> = <%=field.fieldName%>.replace('/,/g','.');
   <% }} %>
	return axios.post('<%=pluralize(toDashed(name))%>', obj).then(data=>data.data);
}
export function editEntity(obj) {
   <% for(field of fields) {
    if(['Float','Double'].includes(field.fieldType)) {
   %>
   <%=field.fieldName%> = <%=field.fieldName%>.replace('/,/g','.');
   <% }} %>
	return axios.put('<%=pluralize(toDashed(name))%>', obj).then(data=>data.data);
}
export function getEntityId(id) {
	return axios.get('<%=pluralize(toDashed(name))%>/'+id).then(data=>data.data)
}
export function getEntityTemplate() {
	return axios.get('<%=pluralize(toDashed(name))%>/template').then(data=>data.data)
}
export function getEntityPrefilled(id,name, masterName) {
	return axios.get(masterName.toLowerCase() + '/'+id+'/'+name.toLowerCase()+'/template')
}
export function deleteId(id) {
	return axios.delete('<%=pluralize(toDashed(name))%>/'+id).then(data=>data.data)
}
export function deleteAllItems(items) {
	return axios.delete('<%=pluralize(toDashed(name))%>', {data: {ids: items}}).then(data=>data.headers)
	/* let promises = items.map(id=>axios.delete('<%=pluralize(toDashed(name))%>/'+id).then(data=>data.data));
	return Promise.all(promises) */
}
export function getLabels() {
	return axios.get('<%=pluralize(toDashed(name))%>/getLabels');
}
export function saveLabels(data) {
	return axios.post('<%=pluralize(toDashed(name))%>/labels', data);
}
export function saveItemOrder(left, right) {
	return axios.post('<%=pluralize(toDashed(name))%>/saveItemOrder', {left, right}).then(data=>data.data)
}
export function getItemOrder() {
	return axios.get('itemorder').then(data=>data.data);
}
export function saveSearch(searchBy, values) {
	return axios.post('savesearch', {searchBy, values}).then(data=>data.data);
}
export function uploadFile(file, name) {
	let ct = name + 'ContentType';
	let fn = name + 'FileName';
	let fs = name + 'FileSize'
	return axios.post('files', {order: file.previewElement.dataset, file: file.dataURL.split('base64,')[1], fileFileName: file.name, fileContentType: file.type, fileFileSize: file.size}).then(data=>data.data)
}
export function getFiles(ids) {
	return axios.get('/files/'+ids).then(data=>data.data);
}
export function deleteImage(id) {
	if(Array.isArray(id)) {
		return axios.delete('/files', {data: {ids: id }}).then(data=>data);
	}
	return axios.delete('/files/'+id).then(data=>data.data)
}
<% for(relationship of relationships) { 
	let thename = addS(firstToUpper(relationship.relationshipName))
	if(!(relationship.relationshipType == 'many-to-many' && relationship.ownerSide==false)) {
%>
	export function get<%=thename%>Data() {
		return axios.get('<%=pluralize(toDashed(relationship.otherEntityName))%>', {params: {}}).then(data=>data.data);
	}

<% } } %>