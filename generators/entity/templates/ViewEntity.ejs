<% include fns.ejs %>

<template>
  <v-app id="inspire">
    <v-content>
      <v-container fluid fill-height>
        <v-layout justify-center>
          <v-flex xs12 sm8 md4>
            <v-card class="elevation-12">
              <v-toolbar dark color="primary">
                <v-toolbar-title>{{$t('app.view')}} {{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.detail.title')}}</v-toolbar-title>
                <v-spacer></v-spacer>

              </v-toolbar>
              <v-card-text>
                <% for(field of fields) { %>
                  <% if(field.fieldType == 'Html' || field.fieldType == 'byte[]' && field.fieldTypeBlobContent == 'text') { %>
                    <div v-hasRole="'<%=field.visibleForRole%>'" ><v-chip label>{{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=field.fieldName%>')}}</v-chip><div v-html="<%=field.fieldName%>"></div></div>
                  <% } 
                  else if(field.fieldType == 'byte[]' && field.fieldTypeBlobContent == 'any') { %> 


                  <v-dialog v-show='<%=field.fieldName%>FileIds.length'
                          v-model="dialogFile<%fName%>"
                          width="500"
                        >
                          <v-btn v-hasRole="'<%=field.visibleForRole%>'"
                            slot="activator"
                            color="primary"
                            dark
                          >
                            View files
                          </v-btn>

                          <v-card>
                            <v-card-title
                              class="headline grey lighten-2"
                              primary-title
                            >
                              View gallery
                            </v-card-title>

                            <v-card-text>

                              <gallery :images='galleryImages' @delete='deleteImage'>
                              </gallery>
                            </v-card-text>

                            <v-divider></v-divider>

                            <v-card-actions>
                              <v-spacer></v-spacer>
                              <v-btn
                                color="gray"
                                flat
                                @click="dialogFile<%=fName%> = false"
                              >
                                Close
                              </v-btn>
                            </v-card-actions>
                          </v-card>
                        </v-dialog>

                    <div v-hasRole="'<%=field.visibleForRole%>'" ><v-chip label>{{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=field.fieldName%>')}}</v-chip>
                      <a v-show='<%=field.fieldName%>' :href='"data:"+<%=field.fieldName%>ContentType+";base64,"+<%=field.fieldName%>' :download='<%=field.fieldName%>FileName'>{{<%=field.fieldName%>FileName}}</a>
                      <span v-show='!<%=field.fieldName%>'>{{$t('app.noFileAttached')}}</span>
                    </div>
                  <% } 
                  else if(field.fieldType == 'byte[]' && field.fieldTypeBlobContent == 'image') {
                  %>
                    <img v-img :src='"data:"+<%=field.fieldName%>ContentType+";base64,"+<%=field.fieldName%>'/>
                  <%
                  }
                  else if(field.fieldType == 'String' && field.fieldValues != undefined) { %>
                    <div v-hasRole="'<%=field.visibleForRole%>'" ><v-chip label>{{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=field.fieldName%>')}}</v-chip><div>
                      <v-chip v-for='val in <%=field.fieldName%>' :key='val' color="primary" text-color="white">{{val}}</v-chip>
                    </div></div>
                  <% }
                  else { %>
                  <div v-hasRole="'<%=field.visibleForRole%>'" ><v-chip label>{{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=field.fieldName%>')}}</v-chip>{{<%=field.fieldName%>}}</div>
                  <% } %>
                <% }%>
                <% for(relationship of relationships) { 
                  if(!(relationship.relationshipType == 'many-to-many' && relationship.ownerSide==false)) {
                    if(relationship.relationshipType == 'many-to-many' || relationship.relationshipType == 'one-to-many') {
                %>
                  <div v-hasRole="'<%=relationship.visibleForRole%>'" ><v-chip label>{{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%= pluralize(relationship.relationshipName) %>')}}</v-chip>
                        <v-chip color="primary" text-color="white" v-for='i in <%=relationship.relationshipName%>' :key='i'>{{i.<%=relationship.otherEntityField%>}}</v-chip>
                  </div>
                <% } else { %>
                  <div v-hasRole="'<%=relationship.visibleForRole%>'" ><v-chip label>{{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=relationship.relationshipName%>')}}</v-chip>{{<%=relationship.relationshipName%>}}</div>
                <% } } }%>   
                <v-btn @click='print' class='viewbuttons'>{{$t('app.print')}}
                  <v-icon color="block">print</v-icon>
                </v-btn>
                <v-btn @click='back' class='viewbuttons'><v-icon right dark>arrow_back</v-icon> {{$t('app.back')}}</v-btn>
              </v-card-text>
            </v-card>
          </v-flex>
        </v-layout>
      </v-container>
    </v-content>
  </v-app>
</template>

<script>
    let store = require('../../../store/<%=toLower(name)%>').default
    let getEntityById = store.getEntityById;
    let getFiles = store.getFiles;
    let deleteImage = store.deleteImage;
    import Gallery from '../../common/Gallery.vue'

		export default {
		data: () => ({
      <% fields.forEach(field=>{%>
        <%
          let fType = field.fieldType;
          let val;
          if(fType == 'String') val = '""';
          if(['Integer','BigDecimal','Long','Float','Double', 'LocalDate', 'Instant', 'ZonedDateTime', 'Boolean', 'byte[]'].includes(fType)) {
            val = '""';
          }
          if(fType == 'String' && field.fieldValues != undefined) val = [];
        %>
        <% if(fType == 'byte[]') { %>
          dialogFile<%=field.fieldName%>: false,
          <%=field.fieldName%>FileIds: [],
          <%=field.fieldName%>ContentType: "",
          <%=field.fieldName%>FileName: "",
          galleryImages: [],
        <% } %>
        <%=field.fieldName%>: <%-val%>,
      <%})%>
      <% for(relationship of relationships) { %>
        <%=relationship.relationshipName%>: '',
      <% } %>
		}),
    created() {
      this.getData();
    },
		methods: {
      async getData() {
        try {
          let entity = await getEntityById(this.$route.params.id);
          <% for(field of fields) { %>
            this.<%=field.fieldName%> = entity.<%=field.fieldName%>;
            <% if(field.fieldType == 'byte[]') { %>
/*              this.<%=field.fieldName%>ContentType = entity.<%=field.fieldName%>ContentType
              this.<%=field.fieldName%>FileName = entity.<%=field.fieldName%>FileName*/
              this.<%=field.fieldName%>FileIds = entity.<%=field.fieldName%>FileIds;
              let entityImages = await getFiles(entity.<%=field.fieldName%>FileIds);
            <% } %>
          <% } %>
            <% for(relationship of relationships) {
              if(!(relationship.relationshipType == 'many-to-many' && relationship.ownerSide==false)) {
            %>
              <%
                if(relationship.relationshipType == 'many-to-many' || relationship.relationshipType == 'one-to-many') {
              %>
                this.<%=relationship.relationshipName%> = entity.<%=pluralize(relationship.relationshipName)%>
              <% } else  { %>
              this.<%=relationship.relationshipName%> = entity.<%=relationship.relationshipName%><%=firstToUpper(relationship.otherEntityField)%>
              <% } %>
            <% } } %> 
        }
        catch(err) {console.log(err)}
      },
      back() {
        this.$router.go(-1)
      },
      print() {
        let status = this.$store.state.app.leftDrawer;
        this.$store.commit('setLeftDrawer', false);
        this.$nextTick(()=>window.print());
        window.onafterprint = () => {
          this.$nextTick(() => this.$store.commit('setLeftDrawer', status))
        }
      },
      async deleteImage(image) {
        try {
         await deleteImage(image);
        }
        catch(err) {
          console.error(err)
        }
      }
		},
    components: {
      Gallery,
    }
	}
</script>
<style scoped>
  .v-chip--label, .v-chip--label .v-chip__content {
    width: 200px;
  }
  >>>.v-chip--label, .v-chip--label .v-chip__content {
    width: 200px;
  }
</style>