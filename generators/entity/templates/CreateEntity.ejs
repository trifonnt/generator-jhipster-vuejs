<%_ include fns.ejs _%>
<template>
  <v-app id="inspire">
    <v-content>
      <v-container fluid fill-height>
        <v-layout justify-center>
          <v-flex xs12 sm8 md4>
            <v-card class="elevation-12">
              <v-toolbar dark color="primary">

                <v-toolbar-title>{{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.home.createOrEditLabel')}}</v-toolbar-title>
                <v-spacer></v-spacer>

              </v-toolbar>
              <v-card-text>
                <v-form @submit.prevent='edit' @keyup.native.enter='enterForm'>
                  <%_
                  fields[0].focus = true;
                  fields.forEach(field=>{
                    let validate = {};
                    let req = false;
                    let fName = field.fieldName;
                    let fType = field.fieldType;
                    if(field.fieldValidateRules && field.fieldValidateRules.includes('required')) {
                      validate.required = true;
                      req = true;
                    }
                    if("fieldValidateRulesMinlength" in field) {
                      validate.min=field.fieldValidateRulesMinlength;
                    }
                    if("fieldValidateRulesMaxlength" in field) {
                      validate.max=field.fieldValidateRulesMaxlength;
                    }
                    if("fieldValidateRulesPattern" in field) {
                      validate.regex = field.fieldValidateRulesPattern;
                    }
                    //if(fType == "Boolean") validate.boolean = true;
                    if(fType == "String" && !("fieldValidateRulesPattern" in field)) validate["alpha_dash"] = true;
                    if(['Integer', 'BigDecimal', 'Long'].includes(fType)) validate.integer = true;
                    if(['Float', 'Double'].includes(fType)) validate.regex = /^(?:\d+|\d{1,3}(?:,\d{3})+)(?:(\.|,)\d+)?/;
                    validate = JSON.stringify(validate)
                  _%>
                    <%_ if(['Integer', 'BigDecimal', 'Long', 'Float', 'Double'].includes(fType) && field.fieldValues == undefined) {%>
                      <v-text-field :readonly='isReadOnly("<%=field.readonlyForRoles%>")' v-hasRole="'<%=field.visibleForRole%>'" <%if(req) {%> prepend-inner-icon='*' <%}%> <%if(field.focus){%> autofocus <%}%>  v-validate='<%-validate%>' name="<%=fName%>" :label="$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')" type="text" v-model="<%=fName%>"></v-text-field>
                      <v-alert v-hasRole="'<%=field.visibleForRole%>'" :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>  
                    <%_ } _%>
                    <%_ if(fType=="String" && field.fieldValues == undefined) { _%>
                      <v-text-field :readonly='isReadOnly("<%=field.readonlyForRoles%>")' v-hasRole="'<%=field.visibleForRole%>'" <%if(req) {%> prepend-inner-icon='*' <%}%> <%if(field.focus){%> autofocus <%}%> name="<%=fName%>" :label="$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')" v-validate='<%-validate%>' type="text" v-model="<%=fName%>"></v-text-field>
                      <v-alert v-hasRole="'<%=field.visibleForRole%>'" :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>  
                    <%_ } _%>
                    <%_ if(fType=="byte[]" && (field.fieldTypeBlobContent == 'any' || field.fieldTypeBlobContent == 'image')) { _%>
                        <span class='grey--text'>
                          {{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')}}
                        </span>
                       <v-dialog
                          v-model="dialogFile<%=fName%>"
                          fullscreen
                        >
                        <template v-slot:activator='{on}'>
                          <v-btn
                            color="primary"
                            dark
                            v-on = 'on'
                          >
                            Upload a file
                          </v-btn>
                        </template>
                          <v-card>
                            <v-card-title
                              class="headline grey lighten-2"
                              primary-title
                            >
                              <h5>Upload file for {{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')}}</h5>
                              <v-spacer></v-spacer>
                              <v-btn
                                color="gray"
                                flat
                                @click="dialogFile<%=fName%> = false"
                              >
                                Close
                              </v-btn>
                            </v-card-title>

                            <v-card-text>
                              <input-file maxFilesize='<%=field.fieldValidateRulesMaxFilesize%>' maxFiles='<%=field.fieldValidateRulesMaxFiles%>' contentType='<%=field.fieldValidateRulesContentType%>' @uploadFile='uploadFile' @loading='loading<%=fName%> = true' name='<%=fName%>' :loading='loading<%=fName%>'></input-file>
                            </v-card-text>

                            <v-divider></v-divider>

                          </v-card>
                        </v-dialog>
                    <%_ } _%>

                    <%_ if(fType == "Boolean") { _%>
                      <v-checkbox :readonly='isReadOnly("<%=field.readonlyForRoles%>")' v-validate='<%-validate%>' v-hasRole="'<%=field.visibleForRole%>'" <%if(field.focus){%> autofocus <%}%>  v-model='<%=fName%>' :label="$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')" name='<%=fName%>'></v-checkbox>
                      <v-alert v-hasRole="'<%=field.visibleForRole%>'" :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>
                    <%_ } _%>

                    <%_ if(fType == "Enumeration") { _%>
                       <multiselect
                        v-validate = '<%-validate%>'
                        data-vv-name = 'id'
                        data-vv-value-path = 'id'
                        :searchable = "true"
                        :show-labels="false"
                        :multiple = '<%=field.enumMultiple%>'
                        :close-on-select="<%=!field.enumMultiple%>" 
                        id='<%=pluralize(fName)%>'
                        label='name'
                        v-model = '<%=fName%>'
                        :options = '<%=fName%>Values'
                        :placeholder="$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%= (field.fieldType == 'many-to-many' || field.relationshipType == 'one-to-many') ? pluralize(fName) : fName %>')"
                      >
                       <template v-slot:option="props">
                        <div>{{props.option}}</div>
                      </template>
                      <template v-slot:singleLabel="{option}">
                        <div>{{option}}</div>
                      </template>
                      <template v-slot:tag="{ option, remove, index }">
                        <span class="multiselect__tag" :key="index">
                          <span>{{option}}</span>
                          <i aria-hidden="true" tabindex="1" @keypress.enter.prevent="remove(option)"  @mousedown.prevent="remove(option)" class="multiselect__tag-icon"></i>
                        </span>
                      </template>
                      </multiselect>
                    <%_ } _%>

                    <%_ if(['LocalDate','ZonedDateTime'].includes(fType)) { _%>
                      <v-menu :disabled='isReadOnly("<%=field.readonlyForRoles%>")' v-hasRole="'<%=field.visibleForRole%>'"
                          ref="menu<%=fName%>"
                          :close-on-content-click="false"
                          v-model="menu<%=fName%>"
                          :nudge-right="40"
                          :return-value.sync="<%=fName%>"
                          lazy
                          transition="scale-transition"
                          offset-y
                          full-width
                          min-width="290px"
                        >
                          <template v-slot:activator='{on}'>
                            <v-text-field
                              v-model="<%=fName%>"
                              label="$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')"
                              prepend-icon="event"
                              readonly
                              v-on='on'
                            ></v-text-field>
                          </template>
                          <v-date-picker v-model="<%=fName%>" @input="$refs.menu<%=fName%>.save(<%=fName%>)"></v-date-picker>

                        </v-menu>
                        <v-alert v-hasRole="'<%=field.visibleForRole%>'" :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>
                    <%_ } _%>

                    <%_ if(fType == 'Instant') { _%>
                      <datetime v-hasRole="'<%=field.visibleForRole%>'" type='datetime' v-model="<%=fName%>" input-id="<%=fName%>" input-class='borderField'>
                          <template v-slot:before>
                            <label for="<%=fName%>">{{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')}}</label>
                          </template>
                      </datetime>   
                    <%_ } _%>

                    <%_ if(fType == "String" && field.fieldValues != undefined) { _%>
                      <v-select :readonly='isReadOnly("<%=field.readonlyForRoles%>")' v-hasRole="'<%=field.visibleForRole%>'" <%if(field.focus){%> autofocus <%}%>  :items='<%=addS(fName)%>' solo v-validate='<%-validate%>' name="<%=fName%>" :label="$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')" v-model="<%=fName%>"></v-select>
                      <v-alert v-hasRole="'<%=field.visibleForRole%>'" :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>
                    <%_ } _%>

                  <%_ if(fType == 'Html' || fType == 'byte[]' && field.fieldTypeBlobContent == 'text') { _%>
                      {{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')}}
                      <br/>
                      <quill-editor v-hasRole="'<%=field.visibleForRole%>'" ref="quillEditor<%=fName%>"
                        v-model="<%=fName%>"
                        :options="editorOptions">
                      </quill-editor>
                  <%_ } _%>
                  <%_ }) _%>
                  <%_ for(relationship of relationships) { 
                    let multiple = false;
                    if(!(relationship.relationshipType == 'many-to-many' && relationship.ownerSide==false)) {
                    if(relationship.relationshipType == 'many-to-many' || relationship.relationshipType == 'one-to-many') multiple=true;

                    let validate = {};
                    let fName = relationship.relationshipName;
                    let fType = relationship.relationshipType;
                    let req = false;
                    if(relationship.relationshipValidateRules && relationship.relationshipValidateRules.includes('required')) {
                      validate.required = true;
                      req = true;
                    }
                    if("relationshipValidateRulesMinlength" in relationship) {
                      validate.min=relationship.relationshipValidateRulesMinlength;
                    }
                    if("relationshipValidateRulesMaxlength" in relationship) {
                      validate.max=relationship.relationshipValidateRulesMaxlength;
                    }
                    if("relationshipValidateRulesPattern" in relationship) {
                      validate.pattern = relationship.fieldValidateRulesPattern;
                    }
                    if(fType == "Boolean") validate.boolean = true;
                    if(fType == "String") validate["alpha_dash"] = true;
                    if(['Integer', 'BigDecimal', 'Long'].includes(fType)) validate.integer = true;
                    if(['Float', 'Double'].includes(fType)) validate.regex = /^(?:\d+|\d{1,3}(?:,\d{3})+)(?:(\.|,)\d+)?/;
                    validate = JSON.stringify(validate)
                    let model = fName;
                    if(relationship.relationshipType == 'many-to-many' || relationship.relationshipType == 'one-to-many') {
                      model = fName+'Values';
                    }
                  _%>
 <!--                      <v-select <%if(relationship.focus){%> autofocus <%}%> <%if(multiple){%> multiple return-object <%}%> :items='<%=addS(fName)%>' solo v-validate='<%-validate%>' name="<%=fName%>" :label="$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')" v-model="<%=fName%>"
                        item-text='<%=relationship.otherEntityField%>' item-value='id'
                        ></v-select>
 -->
                        <%_ if(relationship.otherEntityField2 && relationship.otherEntityName != 'file') { _%>
                          <br>                        
                          <div>{{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%= (relationship.relationshipType == 'many-to-many' || relationship.relationshipType == 'one-to-many') ? pluralize(fName) : fName %>')}}</div>
                          <multiselect
                            v-validate = '<%-validate%>'
                            data-vv-name = 'id'
                            data-vv-value-path = 'id'
                            :internal-search="false"
                            :searchable = "true"
                            @search-change = 'changeSearch'
                            :limit = '10'
                            :show-labels="false"
                            @open='newDropdown'
                            :multiple = '<%=multiple%>'
                            :close-on-select="<%=!multiple%>" 
                            id='<%=pluralize(fName)%>'
                            label='name'
                            v-model = '<%=model%>'
                            :options = '<%=pluralize(fName)%>'
                            :placeholder="$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%= (relationship.relationshipType == 'many-to-many' || relationship.relationshipType == 'one-to-many') ? pluralize(fName) : fName %>')"
                            track-by='id'
                          >
                          <template v-slot:option="props">
                            <div class='leftcol'>{{props.option.<%=relationship.otherEntityField%>}}</div>
                            <div class='rightcol'>{{props.option.<%=relationship.otherEntityField2%>}}</div>
                          </template>
                          <template v-slot:afterList>
                            <v-pagination :total-visible='pageLength' @input='changePage' v-show='pageLength'
                              v-model="currentPage"
                              :length="pageLength"
                            ></v-pagination>
                          </template>
                          <template v-slot:tag="{ option, remove, index }">
                            <span class="multiselect__tag" :key="index">
                              <span>{{option.otherEntityField}}</span>
                              <i aria-hidden="true" tabindex="1" @keypress.enter.prevent="remove(option)"  @mousedown.prevent="remove(option)" class="multiselect__tag-icon"></i>
                            </span>
                          </template>
                          </multiselect>
                      <%_ } else if(relationship.otherEntityName != 'file') { _%>
                          <br>
                          <div>{{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%= (relationship.relationshipType == 'many-to-many' || relationship.relationshipType == 'one-to-many') ? pluralize(fName) : fName %>')}}</div>
                          <multiselect
                            v-validate = '<%-validate%>'
                            data-vv-name = 'id'
                            data-vv-value-path = 'id'
                            :internal-search="false"
                            :searchable = "true"
                            @search-change = 'changeSearch'
                            :limit = '10'
                            @open='newDropdown'
                            :multiple = '<%=!multiple%>'
                            :close-on-select="<%=multiple%>" 
                            id='<%=pluralize(fName)%>'
                            label='name'
                            v-model = '<%=model%>'
                            :options = '<%=pluralize(fName)%>'
                            :placeholder="$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%= (relationship.relationshipType == 'many-to-many' || relationship.relationshipType == 'one-to-many') ? pluralize(fName) : fName %>')"
                            track-by='id'
                          >
                          <template v-slot:afterList>
                            <v-pagination :total-visible='pageLength' @input='changePage' v-show='pageLength'
                              v-model="currentPage"
                              :length="pageLength"
                            ></v-pagination>
                          </template>
                          <template v-slot:tag="{ option, remove, index }">
                            <span class="multiselect__tag" :key="index">
                              <span>{{option}}</span>
                              <i aria-hidden="true" tabindex="1" @keypress.enter.prevent="remove(option)"  @mousedown.prevent="remove(option)" class="multiselect__tag-icon"></i>
                            </span>
                          </template>   
                          </multiselect>
                      <%_ } else { _%>

                        <span class='grey--text'>
                          {{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')}}
                        </span>
                       <v-dialog
                          v-model="dialogFile<%=fName%>"
                          fullscreen
                        >
                          <template v-slot:activator='{on}'>
                            <v-btn
                              color="primary"
                              dark
                              v-on = 'on'
                            >
                              Upload a file
                            </v-btn>
                          </template>
                          <v-card>
                            <v-card-title
                              class="headline grey lighten-2"
                              primary-title
                            >
                              <h5>Upload file for {{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.<%=fName%>')}}</h5>
                              <v-spacer></v-spacer>
                              <v-btn
                                color="gray"
                                flat
                                @click="dialogFile<%=fName%> = false"
                              >
                                Close
                              </v-btn>
                            </v-card-title>

                            <v-card-text>
                              <input-file maxFilesize='<%=relationship.relationshipValidateRulesMaxFilesize%>' maxFiles='<%=relationship.relationshipValidateRulesMaxFiles%>' contentType='<%=relationship.relationshipValidateRulesContentType%>' @uploadFile='uploadFile' @loading='loading<%=fName%> = true' name='<%=fName%>' :loading='loading<%=fName%>'></input-file>
                            </v-card-text>

                            <v-divider></v-divider>

                          </v-card>
                        </v-dialog>
                      <%_ } _%>

                      <v-alert v-hasRole="'<%=relationship.visibleForRole%>'" :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>
                  <%_ } } _%>
             <!--    <v-alert type='success' :value="registered==true">You successfully created a vendor</v-alert>
                <v-alert type='error' :value="registered==false">Please try again, server error</v-alert>  -->               
                </v-form>
              </v-card-text>
              <v-card-actions>
                <v-spacer></v-spacer>
                <v-btn :disabled="errors.any()" color="primary" @click='edit'>{{$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.home.createOrEditLabel')}}</v-btn>
                <v-btn @click='cancel'>{{$t('app.cancel')}}</v-btn>
              </v-card-actions>
            </v-card>
          </v-flex>
        </v-layout>
      </v-container>
    </v-content>
  </v-app>
</template>

<script>
  import {getProfile} from '../../../store/identity'
  import InputFile from '../../common/InputFile.vue'

  let store = require('../../../store/<%=toLower(name)%>').default;
  <%_ for(relationship of relationships) { _%>
    let <%=addS(firstToUpper(relationship.relationshipName))%>store = require('../../../store/<%=toLower(relationship.otherEntityName)%>').default;
  <%_ } _%> 
    let create = store.create;
    let relationStores = {};
    <%_ for(relationship of relationships) { _%>
      relationStores.<%=pluralize(relationship.relationshipName)%> = <%=addS(firstToUpper(relationship.relationshipName))%>store;
    <%_ } _%> 
    let getEntityByTemplate = store.getEntityByTemplate;    
    export default {
    inject: ['$validator'],
    components: {
      InputFile,
    },
    data: () => ({
      activeDropdown: '',
      currentPage: 1,
      pageLength: 0,
      editorOptions: {
        modules: {
          toolbar: [
            ['bold', 'italic', 'underline', 'strike'],
            ['blockquote', 'code-block'],
            [{ 'header': 1 }, { 'header': 2 }],
            [{ 'list': 'ordered' }, { 'list': 'bullet' }],
            [{ 'script': 'sub' }, { 'script': 'super' }],
            [{ 'indent': '-1' }, { 'indent': '+1' }],
            [{ 'direction': 'rtl' }],
            [{ 'size': ['small', false, 'large', 'huge'] }],
            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
            [{ 'font': [] }],
            [{ 'color': [] }, { 'background': [] }],
            [{ 'align': [] }],
            ['clean'],
          ],
        }
      },
      registered: null,
      <%_ fields.forEach(field=>{ _%>
        <%_
          let fType = field.fieldType;
          let val;
          if(fType == 'String') val = '""';
          _%>
          <%_  
            if(fType == 'Enumeration') {
              val = field.defaultValueConstant;
          _%>
            <%=field.fieldName%>Values: <%-JSON.stringify(field.fieldValues.split(',')) _%>,
            <%=field.fieldName%>: "<%=val%>",
          <%_ } _%>
          <%_
          if(['Integer','BigDecimal','Long','Float','Double', 'LocalDate', 'Instant', 'ZonedDateTime','String', 'byte[]','Boolean'].includes(fType)) {
            val = '""';
        _%>
          <%_ 
            if(['LocalDate', 'Instant', 'ZonedDateTime'].includes(fType)) {
          _%>
            menu<%=field.fieldName%>: '',
          <%_ } _%>

          <%_ if(fType == 'byte[]') { _%>
            <%_ if(fType=="byte[]" && (field.fieldTypeBlobContent == 'any' || field.fieldTypeBlobContent == 'image')) { _%>
              dialogFile<%=field.fieldName%>: false,
              loading<%=field.fieldName%>: false,
            <%_ } %>
            <%=field.fieldName%>ContentType: "",
            <%=field.fieldName%>FileName: "",
          <%_ } _%>

        <%=field.fieldName%>: <%-val%>,
        <%_
          }
          if(fType == 'String' && field.fieldValues != undefined) {
            val = field.fieldValues.split(',')
        _%>
        <%=field.fieldName%> : [],
        <%=addS(field.fieldName)%>: [
          <%for(val of field.fieldValues.split(',')) {%>
            "<%=val%>",
          <% } %>
        ],
        <%_
          }
        _%>
      <%_ }) _%>
      <%_ if(relationships.length) { _%>
        <%_ for(relationship of relationships) { _%>
          <%_ if(relationship.otherEntityName == 'file') { _%>
              <%=relationship.relationshipName%>Id: null,
              dialogFile<%=relationship.relationshipName%>: false,
              loading<%=relationship.relationshipName%>: false,
          <%_ } _%>
          <%=pluralize(relationship.relationshipName)%>search: '*',
          <%=pluralize(relationship.relationshipName)%>: [],
          <%_
            if(relationship.relationshipType=='many-to-many' || relationship.relationshipType=='one-to-many') {
          _%>
          <%=relationship.relationshipName%>:[],
          <%=relationship.relationshipName%>Values:[],
          <%_ } else { _%>
          <%=relationship.relationshipName%>: '',
          <%_ } _%>
        <%_ } _%>
      <%_ } _%>

    }),
    created() {
      this.getData();
    },
    watch: {
      <%_ for(relationship of relationships) { _%>
        <%=pluralize(relationship.relationshipName)%>search(val) {
          try {
          this.getDropdownData();
          }
          catch(err) {
            console.error(err)
          }
        },
      <%_ } _%>
    },
    methods: {
      async getDropdownData() {
        if(!this.activeDropdown) return;
        let relation,count;
        let prop = this.activeDropdown + 'search';
        relation = await relationStores[this.activeDropdown].getData(this.currentPage-1, "id,asc", this[prop])
        count = relation.headers['x-total-count']
        relation = relation.data
        this[this.activeDropdown] = relation;
        this.pageLength = Math.ceil(count/10);
      },
      changePage(val) {
        this.currentPage = val;
        this.getDropdownData();
      },
      changeSearch(val) {
        let prop = this.activeDropdown + 'search';
        this[prop] = val
      },
      newDropdown(event) {
        this.activeDropdown = event;
        this.getDropdownData();
      },
      enterForm() {
        if(!this.errors.any()) this.create()
      },
      isReadOnly(roles) {
        if(roles == "false" || !roles) return false;
        if(!roles.length) return roles;
        if(roles.includes(',') 
          && roles.split(',').every(r=>!getProfile().roles.includes(r)).length==0) return false;
        else if(!roles.includes(',') && getProfile().jwt && getProfile().roles[0]!=roles) return false;
        return true
      },
      async uploadFile(obj) {
        try {
          let res = await store.uploadFile(obj.file[0], obj.name)
          let prop = 'loading'+obj.name;
          this[prop] = false;
          prop = 'dialogFile'+ obj.name.charAt(0).toLowerCase() + obj.name.slice(1);
          this[prop] = false
          this.$store.dispatch('snackShowAction', {text: this.$t('file.<%=baseNameApp%>.file.created', {id: res.id}), val: true, color: "success"})
          this[obj.name+'Id'] = res.id;

        }
        catch(err) {
          console.error(err)
        }
      },
      async edit() {
        let res;
        try {
/*          let res = await edit({
            id: this.$route.params.id,
            <% for(field of fields) { %>
              <%=field.fieldName%>:this.<%=field.fieldName%>, 
            <% } %>
            <% for(relationship of relationships) { %>
              <%
                if(relationship.relationshipType=='many-to-many') {
              %>
              <%=pluralize(relationship.relationshipName)%>: this.<%=relationship.relationshipName%>Values,
              <% } %>
              <%=relationship.relationshipName%>Id:this.<%=relationship.relationshipName%>, 
            <% } %>
          });*/
          res = await create({
            <%_ for(field of fields) { _%>
              <%=field.fieldName%>:this.<%=field.fieldName%>,
              <%_ if(field.fieldType == 'byte[]') { _%>
                <%=field.fieldName%>ContentType: this.<%=field.fieldName%>ContentType,
                <%=field.fieldName%>FileName: this.<%=field.fieldName%>FileName,
              <%_ } _%>
            <%_ } _%>
            <%_ for(relationship of relationships) { _%>
              <%_ if(relationship.otherEntityName == 'file') { _%>
                <%=relationship.relationshipName%>Id: this.<%=relationship.relationshipName%>Id,
              <%_
                } else if(relationship.relationshipType=='many-to-many' || relationship.relationshipType=='one-to-many') {
              _%>
              <%=pluralize(relationship.relationshipName)%>: this.<%=relationship.relationshipName%>Values.map(o=>o.id),
              <%_ } else { _%>
              <%=relationship.relationshipName%>Id:this.<%=relationship.relationshipName%>.id, 
            <%_ } } _%>
          });
          this.$store.dispatch('snackShowAction', {text: this.$t('<%=firstToLower(name)%>.<%=baseNameApp%>.<%=firstToLower(name)%>.created', {id: res.id}), val: true, color: "success"})
          this.registered = true
          this.$router.go(-1);
        }
        catch(err) {
          let msg = err.response.data.title;
          this.$store.dispatch('snackShowAction', {text: msg, val: true, color: "error"})          
          this.registered = false
        }
      },
      cancel() {
        this.$router.go(-1);
      },
      async getData() {
        try {
          let [
            <%_ for(relationship of relationships) {
              if(!(relationship.relationshipType == 'many-to-many' && relationship.ownerSide==false)) {
            _%>
              <%=relationship.relationshipName%>,
            <% } } _%> entity] = await Promise.all([
                <%_ for(relationship of relationships) {
                  if(!(relationship.relationshipType == 'many-to-many' && relationship.ownerSide==false)) {
                _%>
                  <%=addS(firstToUpper(relationship.relationshipName))%>store.getData(),
                <%_ } } _%> 
                getEntityByTemplate()
              ]);
          <%_ for(field of fields) { _%>
            this.<%=field.fieldName%> = entity.<%=field.fieldName%>;
            <% if(field.fieldType == 'byte[]') { %>
            this.<%=field.fieldName%>ContentType = entity.<%=field.fieldName%>ContentType
            this.<%=field.fieldName%>FileName = entity.<%=field.fieldName%>FileName
            <%_ } _%>
          <%_ } _%>
          <%_ for(relationship of relationships) { 
            if(!(relationship.relationshipType == 'many-to-many' && relationship.ownerSide==false)) {
          _%>
            this.<%=pluralize(relationship.relationshipName)%> = <%=relationship.relationshipName%>.data
            <%_
              if(relationship.relationshipType == 'many-to-many') {
            _%>
            this.<%=relationship.relationshipName%>Values = entity.<%=pluralize(relationship.relationshipName)%>
            <%_ } else  { _%>
            this.<%=relationship.relationshipName%> = this.<%=pluralize(relationship.relationshipName)%>.filter(o=>o.id == entity.<%=relationship.relationshipName%>Id)
            <%_ } _%>
          <%_ } } _%>
        }
        catch(err) {console.log(err)}
      },
    }
  }
</script>
<style scoped>
  .leftcol {
    width:200px;
    float: left;
  }
  .rightcol {
    width: 200px;
    float: right;
  }
</style>