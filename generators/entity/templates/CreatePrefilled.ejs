<%_ include fns.ejs _%>

<template>
  <v-dialog v-model="dialog" persistent>
  <template v-slot:activator = '{on}'>
  <v-btn @click.native='getData' v-on = 'on' color="primary" dark>{{$t('<%=firstToLower(relationshipName)%>.<%=baseNameApp%>.<%=firstToLower(relationshipName)%>.home.addLabel')}}</v-btn></template>

    <v-card class="elevation-12 createPrefilled">
      <v-toolbar dark color="primary">

        <v-toolbar-title>{{$t('<%=firstToLower(relationshipName)%>.<%=baseNameApp%>.<%=firstToLower(relationshipName)%>.home.addLabel')}}</v-toolbar-title>
        <v-spacer></v-spacer>

      </v-toolbar>
      <v-card-text>
        <v-form @submit.prevent='edit' @keyup.native.enter='enterForm'>
          <%_
          fields[0].focus = true;
          fields.forEach(field=>{
            let validate = {};
            let req = false;
            let fName = field.fieldName;
            let fType = field.fieldType;
            if(field.fieldValidateRules && field.fieldValidateRules.includes('required')) {
              validate.required = true;
              req = true;
            }
            if("fieldValidateRulesMinlength" in field) {
              validate.min=field.fieldValidateRulesMinlength;
            }
            if("fieldValidateRulesMaxlength" in field) {
              validate.max=field.fieldValidateRulesMaxlength;
            }
            if("fieldValidateRulesPattern" in field) {
              validate.pattern = field.fieldValidateRulesPattern;
            }
            //if(fType == "Boolean") validate.boolean = true;
            //if(fType == "String") validate["alpha_dash"] = true;
            if(['Integer', 'BigDecimal', 'Long'].includes(fType)) validate.integer = true;
            if(['Float', 'Double'].includes(fType)) validate.regex = /^(?:\d+|\d{1,3}(?:,\d{3})+)(?:(\.|,)\d+)?/;
            validate = JSON.stringify(validate)
          _%>
            <%_ if(['Integer', 'BigDecimal', 'Long', 'Float', 'Double'].includes(fType) && field.fieldValues == undefined) { _%>
              <v-text-field v-show='!hiddenFields.includes("<%=fName%>")' :readonly='isReadOnly("<%=field.readonlyForRoles%>")' v-hasRole="'<%=field.visibleForRole%>'" <%if(req) {%> prepend-inner-icon='*' <%}%> <%if(field.focus){%> autofocus <%}%>  v-validate='<%-validate%>' name="<%=fName%>" :label="$t('<%=firstToLower(relationshipName)%>.<%=baseNameApp%>.<%=firstToLower(relationshipName)%>.<%=fName%>')" type="text" v-model="<%=fName%>"></v-text-field>
              <v-alert v-hasRole="'<%=field.visibleForRole%>'" :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>  
            <%_ } _%>
            <%_ if(fType=="String" && field.fieldValues == undefined) { _%>
              <v-text-field v-show='!hiddenFields.includes("<%=fName%>")' :readonly='isReadOnly("<%=field.readonlyForRoles%>")' v-hasRole="'<%=field.visibleForRole%>'" <%if(req) {%> prepend-inner-icon='*' <%}%> <%if(field.focus){%> autofocus <%}%> name="<%=fName%>" :label="$t('<%=firstToLower(relationshipName)%>.<%=baseNameApp%>.<%=firstToLower(relationshipName)%>.<%=fName%>')" type="text" v-model="<%=fName%>"></v-text-field>
              <v-alert v-hasRole="'<%=field.visibleForRole%>'" :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>  
            <%_ } _%>
            <%_ if(fType=="byte[]" && (field.fieldTypeBlobContent == 'any' || field.fieldTypeBlobContent == 'image')) { _%>
                <input-file v-show='!hiddenFields.includes("<%=fName%>")' @upload='upload' name='<%=field.fieldName%>'></input-file>
            <%_ } _%>
            <%_ if(fType == "Boolean") { _%>
              <v-checkbox v-show='!hiddenFields.includes("<%=fName%>")' :readonly='isReadOnly("<%=field.readonlyForRoles%>")' v-hasRole="'<%=field.visibleForRole%>'" <%if(field.focus){%> autofocus <%}%>  v-model='<%=fName%>' :label="$t('<%=firstToLower(relationshipName)%>.<%=baseNameApp%>.<%=firstToLower(relationshipName)%>.<%=fName%>')" name='<%=fName%>'></v-checkbox>
              <v-alert v-hasRole="'<%=field.visibleForRole%>'" :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>
            <%_ } _%>
            <%_ if(['LocalDate','ZonedDateTime'].includes(fType)) { _%>
              <v-menu v-show='!hiddenFields.includes("<%=fName%>")' :disabled='isReadOnly("<%=field.readonlyForRoles%>")' v-hasRole="'<%=field.visibleForRole%>'"
                  ref="menu<%=fName%>"
                  :close-on-content-click="false"
                  v-model="menu<%=fName%>"
                  :nudge-right="40"
                  :return-value.sync="<%=fName%>"
                  lazy
                  transition="scale-transition"
                  offset-y
                  full-width
                  min-width="290px"
                >
                  <template v-slot:activator = '{on}'>
                    <v-text-field
                      v-model="<%=fName%>"
                      label="$t('<%=firstToLower(relationshipName)%>.<%=baseNameApp%>.<%=firstToLower(relationshipName)%>.<%=fName%>')"
                      prepend-icon="event"
                      readonly
                      v-on = 'on'
                    ></v-text-field>
                  </template>
                  <v-date-picker v-model="<%=fName%>" @input="$refs.menu<%=fName%>.save(<%=fName%>)"></v-date-picker>

                </v-menu>
                <v-alert v-hasRole="'<%=field.visibleForRole%>'" :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>
            <%_ } _%>
            <%_ if(fType == 'Instant') { _%>
              <datetime v-show='!hiddenFields.includes("<%=fName%>")' v-hasRole="'<%=field.visibleForRole%>'" type='datetime' v-model="<%=fName%>" input-id="<%=fName%>" input-class='borderField'>
                  <template v-slot:before>
                    <label for="<%=fName%>">{{$t('<%=firstToLower(relationshipName)%>.<%=baseNameApp%>.<%=firstToLower(relationshipName)%>.<%=fName%>')}}</label>
                  </template>
              </datetime>   
            <%_ } _%>
            <%_ if(fType == "String" && field.fieldValues != undefined) { _%>
              <v-select v-show='!hiddenFields.includes("<%=fName%>")' :readonly='isReadOnly("<%=field.readonlyForRoles%>")' v-hasRole="'<%=field.visibleForRole%>'" <%if(field.focus){%> autofocus <%}%>  :items='<%=addS(fName)%>' solo v-validate='<%-validate%>' name="<%=fName%>" :label="$t('<%=firstToLower(relationshipName)%>.<%=baseNameApp%>.<%=firstToLower(relationshipName)%>.<%=fName%>')" v-model="<%=fName%>"></v-select>
              <v-alert v-hasRole="'<%=field.visibleForRole%>'" :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>
            <%_ } _%>
          <%_ if(fType == 'Html' || fType == 'byte[]' && field.fieldTypeBlobContent == 'text') { _%>
              {{$t('<%=firstToLower(relationshipName)%>.<%=baseNameApp%>.<%=firstToLower(relationshipName)%>.<%=fName%>')}}
              <br/>
              <quill-editor v-show='!hiddenFields.includes("<%=fName%>")' v-hasRole="'<%=field.visibleForRole%>'" ref="quillEditor<%=fName%>"
                v-model="<%=fName%>"
                :options="editorOptions">
              </quill-editor>
          <%_ } _%>
          <%_ }) _%>
          <%_ for(relationship of relationships) { 
            let multiple = false;
            if(!(relationship.relationshipType == 'many-to-many' && relationship.ownerSide==false)) {
            if(relationship.relationshipType == 'many-to-many' || relationship.relationshipType == 'one-to-many') multiple=true;

            let validate = {};
            let fName = relationship.relationshipName;
            let fType = relationship.relationshipType;
            let req = false;
            if(relationship.relationshipValidateRules && relationship.relationshipValidateRules.includes('required')) {
              validate.required = true;
              req = true;
            }
            if("relationshipValidateRulesMinlength" in relationship) {
              validate.min=relationship.relationshipValidateRulesMinlength;
            }
            if("relationshipValidateRulesMaxlength" in relationship) {
              validate.max=relationship.relationshipValidateRulesMaxlength;
            }
            if("relationshipValidateRulesPattern" in relationship) {
              validate.pattern = relationship.fieldValidateRulesPattern;
            }
            if(fType == "Boolean") validate.boolean = true;
            //if(fType == "String") validate["alpha_dash"] = true;
            if(['Integer', 'BigDecimal', 'Long'].includes(fType)) validate.integer = true;
            if(['Float', 'Double'].includes(fType)) validate.regex = /^(?:\d+|\d{1,3}(?:,\d{3})+)(?:(\.|,)\d+)?/;
            validate = JSON.stringify(validate)
            let model = fName;
            if(relationship.relationshipType == 'many-to-many' || relationship.relationshipType == 'one-to-many') {
              model = fName+'Values';
            }
          _%>
<!--                      <v-select <%if(relationship.focus){%> autofocus <%}%> <%if(multiple){%> multiple return-object <%}%> :items='<%=addS(fName)%>' solo v-validate='<%-validate%>' name="<%=fName%>" :label="$t('<%=firstToLower(relationshipName)%>.<%=baseNameApp%>.<%=firstToLower(relationshipName)%>.<%=fName%>')" v-model="<%=fName%>"
                item-text='<%=relationship.otherEntityField%>' item-value='id'
                ></v-select>
-->
                <%_ if(relationship.otherEntityName2) { _%>
<!--                         <v-autocomplete v-show='!hiddenFields.includes("<%=fName%>")' @click='newDropdown' :readonly='isReadOnly("<%=relationship.readonlyForRoles%>")' v-hasRole="'<%=relationship.visibleForRole%>'"
                  <%if(multiple){%> multiple return-object <%}%> 
                  <%if(req) {%> prepend-inner-icon='*' <%}%>
                  :items='<%=pluralize(fName)%>'
                  :search-input.sync="<%=fName%>search"
                  v-validate='<%-validate%>' 
                  name="<%=pluralize(fName)%>" 
                  :label="$t('<%=firstToLower(relationshipName)%>.<%=baseNameApp%>.<%=firstToLower(relationshipName)%>.<%= (relationship.relationshipType == 'many-to-many' || relationship.relationshipType == 'one-to-many') ? pluralize(fName) : fName %>')"
                  v-model="<%=model%>"
                  item-text='<%=relationship.otherEntityField%>' 
                  item-value='id'
                  :filter="v => v"
                >
                  <v-pagination :total-visible='pageLength' @input='changePage' slot='append-item'
                    v-model="currentPage"
                    :length="pageLength"
                  ></v-pagination>
                <template slot="item" slot-scope="{item}">
                  <div class='leftcol'>{{item.<%=relationship.otherEntityName%>.substr(0,20)}}</div> <div class='rightcol'>{{item.<%=relationship.otherEntityName2%>}}</div>
                </template>
                </v-autocomplete>
-->
                  <multiselect
                    v-validate = '<%-validate%>'
                    data-vv-name = '<%=relationship.otherEntityField%>'
                    data-vv-value-path = 'id'
                    :internal-search="false"
                    :searchable = "true"
                    @search-change = 'changeSearch'
                    :limit = '10'
                    :show-labels="false"
                    @open='newDropdown'
                    :multiple = '<%=multiple%>'
                    :close-on-select="<%=!multiple%>" 
                    id='<%=pluralize(fName)%>'
                    label='name'
                    v-model = '<%=model%>'
                    :options = '<%=pluralize(fName)%>'
                    :placeholder="$t('<%=firstToLower(relationshipName)%>.<%=baseNameApp%>.<%=firstToLower(relationshipName)%>.<%= (relationship.relationshipType == 'many-to-many' || relationship.relationshipType == 'one-to-many') ? pluralize(fName) : fName %>')"
                    track-by='id'
                  >
                  <template v-slot:option="props">
                    <div class='leftcol'>{{props.option.<%=relationship.otherEntityField%>}}</div>
                    <div class='rightcol'>{{props.option.<%=relationship.otherEntityField2%>}}</div>
                  </template>
                  <template v-slot:afterList>
                    <v-pagination :total-visible='pageLength' @input='changePage' v-show='pageLength'
                      v-model="currentPage"
                      :length="pageLength"
                    ></v-pagination>
                  </template>
                  </multiselect>
              <% } else { %>
<!--                         <v-autocomplete v-show='!hiddenFields.includes("<%=fName%>")' @click='newDropdown' :readonly='isReadOnly("<%=relationship.readonlyForRoles%>")' v-hasRole="'<%=relationship.visibleForRole%>'"
                  <%if(multiple){%> multiple return-object <%}%> 
                  <%if(req) {%> prepend-inner-icon='*' <%}%>
                  :items='<%=pluralize(fName)%>'
                  :search-input.sync="<%=fName%>search"
                  v-validate='<%-validate%>' 
                  name="<%=pluralize(fName)%>" 
                  :label="$t('<%=firstToLower(relationshipName)%>.<%=baseNameApp%>.<%=firstToLower(relationshipName)%>.<%= (relationship.relationshipType == 'many-to-many' || relationship.relationshipType == 'one-to-many') ? pluralize(fName) : fName %>')"
                  v-model="<%=model%>"
                  item-text='<%=relationship.otherEntityField%>' 
                  item-value='id'
                >
                  <v-pagination :total-visible='pageLength' @input='changePage' slot='append-item'
                    v-model="currentPage"
                    :length="pageLength"
                  ></v-pagination>
                </v-autocomplete> -->
                  <multiselect
                    v-validate = '<%-validate%>'
                    data-vv-name = '<%=relationship.otherEntityField%>'
                    data-vv-value-path = 'id'
                    :internal-search="false"
                    :searchable = "true"
                    @search-change = 'changeSearch'
                    :limit = '10'
                    :show-labels="false"
                    @open='newDropdown'
                    :multiple = '<%=multiple%>'
                    :close-on-select="<%=!multiple%>" 
                    id='<%=pluralize(fName)%>'
                    label='name'
                    v-model = '<%=model%>'
                    :options = '<%=pluralize(fName)%>'
                    :placeholder="$t('<%=firstToLower(relationshipName)%>.<%=baseNameApp%>.<%=firstToLower(relationshipName)%>.<%= (relationship.relationshipType == 'many-to-many' || relationship.relationshipType == 'one-to-many') ? pluralize(fName) : fName %>')"
                    track-by='id'
                  >
                  <template v-slot:afterList>
                    <v-pagination :total-visible='pageLength' @input='changePage' v-show='pageLength'
                      v-model="currentPage"
                      :length="pageLength"
                    ></v-pagination>
                  </template>
                  </multiselect>
              <%_ } _%>
              <v-alert v-hasRole="'<%=relationship.visibleForRole%>'" :value="errors.has('<%=fName%>')" type="error">{{ errors.first('<%=fName%>') }}</v-alert>
          <%_ } } _%>
     <!--    <v-alert type='success' :value="registered==true">You successfully created a vendor</v-alert>
        <v-alert type='error' :value="registered==false">Please try again, server error</v-alert>  -->               
        </v-form>
      </v-card-text>
      <v-card-actions>
        <v-spacer></v-spacer>
        <v-btn :disabled="errors.any()" color="primary" @click='edit'>{{$t('<%=firstToLower(relationshipName)%>.<%=baseNameApp%>.<%=firstToLower(relationshipName)%>.home.createOrEditLabel')}}</v-btn>
        <v-btn @click='cancel'>{{$t('app.cancel')}}</v-btn>
      </v-card-actions>
    </v-card>
  </v-dialog>
</template>

<script>
  import {getProfile} from '../../../store/identity'
  import InputFile from '../../common/InputFile.vue'
  import pluralize from 'pluralize'

  let store, create, getEntityPrefilled;
  <%_ for(relationship of relationships) { _%>
    let <%=addS(firstToUpper(relationship.relationshipName))%>store = require('../../../store/<%=toLower(relationship.otherEntityName)%>').default;
  <%_ } _%> 
    let relationStores = {};
    <%_ for(relationship of relationships) { _%>
      relationStores.<%=pluralize(relationship.relationshipName)%> = <%=addS(firstToUpper(relationship.relationshipName))%>store;
    <%_ } _%> 


    let vueObj = {};

    vueObj.data = () => ({
      hiddenFields: [],
      dialog: false,
      activeDropdown: '',
      currentPage: 1,
      pageLength: 0,
      editorOptions: {
        modules: {
          toolbar: [
            ['bold', 'italic', 'underline', 'strike'],
            ['blockquote', 'code-block'],
            [{ 'header': 1 }, { 'header': 2 }],
            [{ 'list': 'ordered' }, { 'list': 'bullet' }],
            [{ 'script': 'sub' }, { 'script': 'super' }],
            [{ 'indent': '-1' }, { 'indent': '+1' }],
            [{ 'direction': 'rtl' }],
            [{ 'size': ['small', false, 'large', 'huge'] }],
            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
            [{ 'font': [] }],
            [{ 'color': [] }, { 'background': [] }],
            [{ 'align': [] }],
            ['clean'],
          ],
        }
      },
      registered: null,
      <%_ fields.forEach(field=>{ _%>
        <%
          let fType = field.fieldType;
          let val;
          if(fType == 'String') val = '""';
          if(fType == 'Boolean') val = "''";
          if(['Integer','BigDecimal','Long','Float','Double', 'LocalDate', 'Instant', 'ZonedDateTime','String', 'byte[]', 'Boolean'].includes(fType)) {
            val = '""';
        _%>
          <%_ 
            if(['LocalDate', 'Instant', 'ZonedDateTime'].includes(fType)) {
          _%>
            menu<%=field.fieldName%>: '',
          <%_ } _%>
          <%_ if(fType == 'byte[]') { _%>
            <%=field.fieldName%>ContentType: "",
            <%=field.fieldName%>FileName: "",
          <%_ } _%>
        <%=field.fieldName%>: <%-val%>,
        <%_
          }
          if(fType == 'String' && field.fieldValues != undefined) {
            val = field.fieldValues.split(',')
        _%>
        <%=field.fieldName%> : [],
        <%=addS(field.fieldName)%>: [
          <%_ for(val of field.fieldValues.split(',')) { _%>
            "<%=val%>",
          <%_ } _%>
        ],
        <%
          }
        %>
      <%_ }) _%>
      <%_ if(relationships.length) { _%>
        <%_ for(relationship of relationships) { _%>
          <%=pluralize(relationship.relationshipName)%>search: '*',
          <%=pluralize(relationship.relationshipName)%>: [],
          <%_
            if(relationship.relationshipType=='many-to-many' || relationship.relationshipType=='one-to-many') {
          _%>
          <%=relationship.relationshipName%>:[],
          <%=relationship.relationshipName%>Values:[],
          <%_ } else { _%>
          <%=relationship.relationshipName%>: '',
          <%_ } _%>
        <%_ } _%>
      <%_ } _%>

    })


    vueObj.methods = {
      async getDropdownData() {
        if(!this.activeDropdown) return;
        let relation,count;
        let prop = this.activeDropdown + 'search';
        relation = await relationStores[this.activeDropdown].getData(this.currentPage-1, "id,asc", this[prop])
        count = relation.headers['x-total-count']
        relation = relation.data
        this[this.activeDropdown] = relation;
        this.pageLength = Math.ceil(count/10);
      },
      changePage(val) {
        this.currentPage = val;
        this.getDropdownData();
      },
      changeSearch(val) {
        let prop = this.activeDropdown + 'search';
        this[prop] = val
      },
      newDropdown(event) {
        this.activeDropdown = event;
        this.getDropdownData();
      },
      enterForm() {
        if(!this.errors.any()) this.create()
      },
      isReadOnly(roles) {
        if(roles == "false" || !roles) return false;
        if(!roles.length) return roles;
        if(roles.includes(',') 
          && roles.split(',').every(r=>!getProfile().roles.includes(r)).length==0) return false;
        else if(!roles.includes(',') && getProfile().jwt && getProfile().roles[0]!=roles) return false;
        return true
      },
      readFile(file) {
        return new Promise((resolve, reject) => {
          let reader = new FileReader();
          reader.onload = () => {
            resolve({result: reader.result, name: file.name});
          };
          reader.onerror = reject;
          reader.readAsDataURL(file)
        })
      },
      upload(e) {
        let files = e.files;
        let fieldName = e.name;
        let p = Promise.resolve();
        let parr = Object.keys(files).map(file=>p.then(()=>this.readFile(files[file])));
        Promise.all(parr).then(result=>{
          let name = result[0].name;
          let data = result[0].result.split(";base64,");
          this[fieldName] = data[1];
          this[fieldName+"ContentType"] = data[0].split(":")[1];
          this[fieldName+"FileName"] = name;
        })
      },
      async edit() {
        let res;
        try {
    /*          let res = await edit({
            id: this.$route.params.id,
            <% for(field of fields) { %>
              <%=field.fieldName%>:this.<%=field.fieldName%>, 
            <% } %>
            <% for(relationship of relationships) { %>
              <%
                if(relationship.relationshipType=='many-to-many') {
              %>
              <%=pluralize(relationship.relationshipName)%>: this.<%=relationship.relationshipName%>Values,
              <% } %>
              <%=relationship.relationshipName%>Id:this.<%=relationship.relationshipName%>, 
            <% } %>
          });*/
          res = await create({
            <%_ for(field of fields) { _%>
              <%=field.fieldName%>:this.<%=field.fieldName%>,
              <%_ if(field.fieldType == 'byte[]') { _%>
                <%=field.fieldName%>ContentType: this.<%=field.fieldName%>ContentType,
                <%=field.fieldName%>FileName: this.<%=field.fieldName%>FileName,
              <%_ } _%>
            <%_ } _%>
            <%_ for(relationship of relationships) { _%>
              <%_
                if(relationship.relationshipType=='many-to-many' || relationship.relationshipType=='one-to-many') {
              _%>
              <%=pluralize(relationship.relationshipName)%>: this.<%=relationship.relationshipName%>Values,
              <%_ } _%>
              <%=relationship.relationshipName%>Id:this.<%=relationship.relationshipName%>.id, 
            <%_ } _%>
          });
          this.$store.dispatch('snackShowAction', {text: this.$t('<%=firstToLower(relationshipName)%>.<%=baseNameApp%>.<%=firstToLower(relationshipName)%>.created', {id: res.id}), val: true, color: "success"})
          this.registered = true
          this.dialog = false;
          this.$parent.$parent.$emit('closeDialog', true)
        }
        catch(err) {
          let msg = err.response.data.title;
          this.$store.dispatch('snackShowAction', {text: msg, val: true, color: "error"})          
          this.registered = false
        }
      },
      cancel() {
        this.dialog = false;
        this.$parent.$parent.$emit('closeDialog', false)
      },
      async getData() {
        console.log(getEntityPrefilled)
        <%_ for(field of fields) { _%>
            this.<%=field.fieldName%> = '';
            <%_ if(field.fieldType == 'byte[]') { _%>
            this.<%=field.fieldName%>ContentType = ''
            this.<%=field.fieldName%>FileName = ''
            <%_ } _%>
          <%_ } _%>
          <%_ for(relationship of relationships) { 
            if(!(relationship.relationshipType == 'many-to-many' && relationship.ownerSide==false)) {
          _%>
              <%_
                if(relationship.relationshipType == 'many-to-many') {
              _%>
              this.<%=relationship.relationshipName%>Values = ''
              <%_ } else  { _%>
              this.<%=relationship.relationshipName%> = ''
              <%_ } _%>
              this.<%=pluralize(relationship.relationshipName)%> = ''
          <%_ } } _%>
        try {
          let [
            <%_ for(relationship of relationships) {
              if(!(relationship.relationshipType == 'many-to-many' && relationship.ownerSide==false)) {
            _%>
              <%=relationship.relationshipName%>,
            <% } } _%> entity] = await Promise.all([
                <%_ for(relationship of relationships) {
                  if(!(relationship.relationshipType == 'many-to-many' && relationship.ownerSide==false)) {
                _%>
                  <%=addS(firstToUpper(relationship.relationshipName))%>store.getData(),
                <%_ } } _%> 
                getEntityPrefilled(this.prefillId, pluralize(this.prefillName), pluralize(this.masterEntity))
              ]);
            this.hiddenFields = JSON.parse(entity.headers['x-<%=toLower(baseNameApp)%>-hidden-fields']);
            entity = entity.data;
          <%_ for(field of fields) { _%>
            this.<%=field.fieldName%> = entity.<%=field.fieldName%>;
            <%_ if(field.fieldType == 'byte[]') { _%>
            this.<%=field.fieldName%>ContentType = entity.<%=field.fieldName%>ContentType
            this.<%=field.fieldName%>FileName = entity.<%=field.fieldName%>FileName
            <%_ } _%>
          <%_ } _%>
          <%_ for(relationship of relationships) { 
            if(!(relationship.relationshipType == 'many-to-many' && relationship.ownerSide==false)) {
          _%>
            <%_
              if(relationship.relationshipType == 'many-to-many') {
            _%>
            this.<%=relationship.relationshipName%>Values = entity.<%=pluralize(relationship.relationshipName)%>
            <%_ } else  { _%>
            this.<%=relationship.relationshipName%>Id = entity.<%=relationship.relationshipName%>Id
            <%_ } _%>
            this.<%=pluralize(relationship.relationshipName)%> = <%=relationship.relationshipName%>.data
          <%_ } } _%>
        }
        catch(err) {console.log(err)}
      },
    }

    try {
      let extend = require('./CreatePrefilledFunctionsX')
      vueObj.data && Object.assign(vueObj.data, extend.data)
      vueObj.methods && Object.assign(vueObj.methods, extend.methods)
      vueObj.computed && Object.assign(vueObj.computed, extend.computed)
    } catch(err) {
      console.log(err)
    }

    
    export default {
    inject: ['$validator'],
    components: {
      InputFile,
    },
    created() {
      store = require('../../../store/'+this.relationshipOther.toLowerCase()).default;
      create = store.create
      getEntityPrefilled = store.getEntityPrefilled;
    },
    data: vueObj.data,
    props: {
      prefillId: Number,
      prefillName: String,
      relationshipName: String,
      relationshipOther: String,
      masterEntity: String,
    },
    watch: {
      <%_ for(relationship of relationships) { _%>
        <%=pluralize(relationship.relationshipName)%>search(val) {
          try {
          this.getDropdownData();
          }
          catch(err) {
            console.error(err)
          }
        },
      <%_ } _%>
      dialog(val) {
        if(!val) return;
        requestAnimationFrame(() => {
          document.querySelector('.createPrefilled input').focus()
        })
      }
    },
    methods: vueObj.methods,
  }
</script>
<style scoped>
  .leftcol {
    width:200px;
    float: left;
  }
  .rightcol {
    width: 200px;
    float: right;
  }
</style>